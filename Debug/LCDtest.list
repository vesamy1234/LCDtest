
LCDtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000147c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800153c  0800153c  0000253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015a0  080015a0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  080015a0  080015a0  000025a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015a8  080015a8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015a8  080015a8  000025a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015ac  080015ac  000025ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080015b0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000010  080015bc  00003010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080015bc  000030a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e4e  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001403  00000000  00000000  00006e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000119f  00000000  00000000  00008285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  00009428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c5  00000000  00000000  000097c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ee24  00000000  00000000  00009b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000065dd  00000000  00000000  000189a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000572a2  00000000  00000000  0001ef86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00076228  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008d0  00000000  00000000  0007626c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00076b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001524 	.word	0x08001524

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08001524 	.word	0x08001524

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_ldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d115      	bne.n	8000274 <__aeabi_ldivmod+0x30>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d113      	bne.n	8000274 <__aeabi_ldivmod+0x30>
 800024c:	2900      	cmp	r1, #0
 800024e:	db06      	blt.n	800025e <__aeabi_ldivmod+0x1a>
 8000250:	dc01      	bgt.n	8000256 <__aeabi_ldivmod+0x12>
 8000252:	2800      	cmp	r0, #0
 8000254:	d006      	beq.n	8000264 <__aeabi_ldivmod+0x20>
 8000256:	2000      	movs	r0, #0
 8000258:	43c0      	mvns	r0, r0
 800025a:	0841      	lsrs	r1, r0, #1
 800025c:	e002      	b.n	8000264 <__aeabi_ldivmod+0x20>
 800025e:	2180      	movs	r1, #128	@ 0x80
 8000260:	0609      	lsls	r1, r1, #24
 8000262:	2000      	movs	r0, #0
 8000264:	b407      	push	{r0, r1, r2}
 8000266:	4802      	ldr	r0, [pc, #8]	@ (8000270 <__aeabi_ldivmod+0x2c>)
 8000268:	a101      	add	r1, pc, #4	@ (adr r1, 8000270 <__aeabi_ldivmod+0x2c>)
 800026a:	1840      	adds	r0, r0, r1
 800026c:	9002      	str	r0, [sp, #8]
 800026e:	bd03      	pop	{r0, r1, pc}
 8000270:	ffffffd1 	.word	0xffffffd1
 8000274:	b403      	push	{r0, r1}
 8000276:	4668      	mov	r0, sp
 8000278:	b501      	push	{r0, lr}
 800027a:	9802      	ldr	r0, [sp, #8]
 800027c:	f000 f834 	bl	80002e8 <__gnu_ldivmod_helper>
 8000280:	9b01      	ldr	r3, [sp, #4]
 8000282:	469e      	mov	lr, r3
 8000284:	b002      	add	sp, #8
 8000286:	bc0c      	pop	{r2, r3}
 8000288:	4770      	bx	lr
 800028a:	46c0      	nop			@ (mov r8, r8)

0800028c <__aeabi_lmul>:
 800028c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028e:	46ce      	mov	lr, r9
 8000290:	4699      	mov	r9, r3
 8000292:	0c03      	lsrs	r3, r0, #16
 8000294:	469c      	mov	ip, r3
 8000296:	0413      	lsls	r3, r2, #16
 8000298:	4647      	mov	r7, r8
 800029a:	0c1b      	lsrs	r3, r3, #16
 800029c:	001d      	movs	r5, r3
 800029e:	000e      	movs	r6, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	0404      	lsls	r4, r0, #16
 80002a4:	0c24      	lsrs	r4, r4, #16
 80002a6:	b580      	push	{r7, lr}
 80002a8:	0007      	movs	r7, r0
 80002aa:	0c10      	lsrs	r0, r2, #16
 80002ac:	434b      	muls	r3, r1
 80002ae:	4365      	muls	r5, r4
 80002b0:	4341      	muls	r1, r0
 80002b2:	4360      	muls	r0, r4
 80002b4:	0c2c      	lsrs	r4, r5, #16
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	1824      	adds	r4, r4, r0
 80002ba:	468c      	mov	ip, r1
 80002bc:	42a3      	cmp	r3, r4
 80002be:	d903      	bls.n	80002c8 <__aeabi_lmul+0x3c>
 80002c0:	2380      	movs	r3, #128	@ 0x80
 80002c2:	025b      	lsls	r3, r3, #9
 80002c4:	4698      	mov	r8, r3
 80002c6:	44c4      	add	ip, r8
 80002c8:	4649      	mov	r1, r9
 80002ca:	4379      	muls	r1, r7
 80002cc:	4356      	muls	r6, r2
 80002ce:	0c23      	lsrs	r3, r4, #16
 80002d0:	042d      	lsls	r5, r5, #16
 80002d2:	0c2d      	lsrs	r5, r5, #16
 80002d4:	1989      	adds	r1, r1, r6
 80002d6:	4463      	add	r3, ip
 80002d8:	0424      	lsls	r4, r4, #16
 80002da:	1960      	adds	r0, r4, r5
 80002dc:	18c9      	adds	r1, r1, r3
 80002de:	bcc0      	pop	{r6, r7}
 80002e0:	46b9      	mov	r9, r7
 80002e2:	46b0      	mov	r8, r6
 80002e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e6:	46c0      	nop			@ (mov r8, r8)

080002e8 <__gnu_ldivmod_helper>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	46ce      	mov	lr, r9
 80002ec:	4647      	mov	r7, r8
 80002ee:	b580      	push	{r7, lr}
 80002f0:	4691      	mov	r9, r2
 80002f2:	4698      	mov	r8, r3
 80002f4:	0004      	movs	r4, r0
 80002f6:	000d      	movs	r5, r1
 80002f8:	f000 f814 	bl	8000324 <__divdi3>
 80002fc:	0007      	movs	r7, r0
 80002fe:	000e      	movs	r6, r1
 8000300:	0002      	movs	r2, r0
 8000302:	000b      	movs	r3, r1
 8000304:	4648      	mov	r0, r9
 8000306:	4641      	mov	r1, r8
 8000308:	f7ff ffc0 	bl	800028c <__aeabi_lmul>
 800030c:	1a24      	subs	r4, r4, r0
 800030e:	418d      	sbcs	r5, r1
 8000310:	9b08      	ldr	r3, [sp, #32]
 8000312:	0038      	movs	r0, r7
 8000314:	0031      	movs	r1, r6
 8000316:	601c      	str	r4, [r3, #0]
 8000318:	605d      	str	r5, [r3, #4]
 800031a:	bcc0      	pop	{r6, r7}
 800031c:	46b9      	mov	r9, r7
 800031e:	46b0      	mov	r8, r6
 8000320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000322:	46c0      	nop			@ (mov r8, r8)

08000324 <__divdi3>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	46d6      	mov	lr, sl
 8000328:	464f      	mov	r7, r9
 800032a:	4646      	mov	r6, r8
 800032c:	b5c0      	push	{r6, r7, lr}
 800032e:	0004      	movs	r4, r0
 8000330:	000d      	movs	r5, r1
 8000332:	0010      	movs	r0, r2
 8000334:	0019      	movs	r1, r3
 8000336:	b082      	sub	sp, #8
 8000338:	2d00      	cmp	r5, #0
 800033a:	da00      	bge.n	800033e <__divdi3+0x1a>
 800033c:	e087      	b.n	800044e <__divdi3+0x12a>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db0b      	blt.n	800035a <__divdi3+0x36>
 8000342:	0016      	movs	r6, r2
 8000344:	001f      	movs	r7, r3
 8000346:	42ab      	cmp	r3, r5
 8000348:	d919      	bls.n	800037e <__divdi3+0x5a>
 800034a:	2000      	movs	r0, #0
 800034c:	2100      	movs	r1, #0
 800034e:	b002      	add	sp, #8
 8000350:	bce0      	pop	{r5, r6, r7}
 8000352:	46ba      	mov	sl, r7
 8000354:	46b1      	mov	r9, r6
 8000356:	46a8      	mov	r8, r5
 8000358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035a:	2700      	movs	r7, #0
 800035c:	4246      	negs	r6, r0
 800035e:	418f      	sbcs	r7, r1
 8000360:	42af      	cmp	r7, r5
 8000362:	d804      	bhi.n	800036e <__divdi3+0x4a>
 8000364:	d000      	beq.n	8000368 <__divdi3+0x44>
 8000366:	e082      	b.n	800046e <__divdi3+0x14a>
 8000368:	42a6      	cmp	r6, r4
 800036a:	d800      	bhi.n	800036e <__divdi3+0x4a>
 800036c:	e07f      	b.n	800046e <__divdi3+0x14a>
 800036e:	2000      	movs	r0, #0
 8000370:	2100      	movs	r1, #0
 8000372:	e08f      	b.n	8000494 <__divdi3+0x170>
 8000374:	2700      	movs	r7, #0
 8000376:	4246      	negs	r6, r0
 8000378:	418f      	sbcs	r7, r1
 800037a:	429f      	cmp	r7, r3
 800037c:	d8e5      	bhi.n	800034a <__divdi3+0x26>
 800037e:	42af      	cmp	r7, r5
 8000380:	d100      	bne.n	8000384 <__divdi3+0x60>
 8000382:	e098      	b.n	80004b6 <__divdi3+0x192>
 8000384:	2300      	movs	r3, #0
 8000386:	4699      	mov	r9, r3
 8000388:	0039      	movs	r1, r7
 800038a:	0030      	movs	r0, r6
 800038c:	f000 f8bc 	bl	8000508 <__clzdi2>
 8000390:	4680      	mov	r8, r0
 8000392:	0029      	movs	r1, r5
 8000394:	0020      	movs	r0, r4
 8000396:	f000 f8b7 	bl	8000508 <__clzdi2>
 800039a:	4643      	mov	r3, r8
 800039c:	1a1b      	subs	r3, r3, r0
 800039e:	4698      	mov	r8, r3
 80003a0:	3b20      	subs	r3, #32
 80003a2:	d500      	bpl.n	80003a6 <__divdi3+0x82>
 80003a4:	e07c      	b.n	80004a0 <__divdi3+0x17c>
 80003a6:	0031      	movs	r1, r6
 80003a8:	4099      	lsls	r1, r3
 80003aa:	469a      	mov	sl, r3
 80003ac:	000b      	movs	r3, r1
 80003ae:	0031      	movs	r1, r6
 80003b0:	4640      	mov	r0, r8
 80003b2:	4081      	lsls	r1, r0
 80003b4:	000a      	movs	r2, r1
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d85f      	bhi.n	800047a <__divdi3+0x156>
 80003ba:	d05c      	beq.n	8000476 <__divdi3+0x152>
 80003bc:	4651      	mov	r1, sl
 80003be:	1aa4      	subs	r4, r4, r2
 80003c0:	419d      	sbcs	r5, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	da00      	bge.n	80003c8 <__divdi3+0xa4>
 80003c6:	e093      	b.n	80004f0 <__divdi3+0x1cc>
 80003c8:	2100      	movs	r1, #0
 80003ca:	2000      	movs	r0, #0
 80003cc:	2601      	movs	r6, #1
 80003ce:	9000      	str	r0, [sp, #0]
 80003d0:	9101      	str	r1, [sp, #4]
 80003d2:	4651      	mov	r1, sl
 80003d4:	408e      	lsls	r6, r1
 80003d6:	9601      	str	r6, [sp, #4]
 80003d8:	4641      	mov	r1, r8
 80003da:	2601      	movs	r6, #1
 80003dc:	408e      	lsls	r6, r1
 80003de:	4641      	mov	r1, r8
 80003e0:	9600      	str	r6, [sp, #0]
 80003e2:	2900      	cmp	r1, #0
 80003e4:	d050      	beq.n	8000488 <__divdi3+0x164>
 80003e6:	07d9      	lsls	r1, r3, #31
 80003e8:	0856      	lsrs	r6, r2, #1
 80003ea:	430e      	orrs	r6, r1
 80003ec:	085f      	lsrs	r7, r3, #1
 80003ee:	4641      	mov	r1, r8
 80003f0:	2201      	movs	r2, #1
 80003f2:	2300      	movs	r3, #0
 80003f4:	e00c      	b.n	8000410 <__divdi3+0xec>
 80003f6:	42af      	cmp	r7, r5
 80003f8:	d101      	bne.n	80003fe <__divdi3+0xda>
 80003fa:	42a6      	cmp	r6, r4
 80003fc:	d80a      	bhi.n	8000414 <__divdi3+0xf0>
 80003fe:	1ba4      	subs	r4, r4, r6
 8000400:	41bd      	sbcs	r5, r7
 8000402:	1924      	adds	r4, r4, r4
 8000404:	416d      	adcs	r5, r5
 8000406:	3901      	subs	r1, #1
 8000408:	18a4      	adds	r4, r4, r2
 800040a:	415d      	adcs	r5, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	d006      	beq.n	800041e <__divdi3+0xfa>
 8000410:	42af      	cmp	r7, r5
 8000412:	d9f0      	bls.n	80003f6 <__divdi3+0xd2>
 8000414:	3901      	subs	r1, #1
 8000416:	1924      	adds	r4, r4, r4
 8000418:	416d      	adcs	r5, r5
 800041a:	2900      	cmp	r1, #0
 800041c:	d1f8      	bne.n	8000410 <__divdi3+0xec>
 800041e:	9800      	ldr	r0, [sp, #0]
 8000420:	9901      	ldr	r1, [sp, #4]
 8000422:	4653      	mov	r3, sl
 8000424:	1900      	adds	r0, r0, r4
 8000426:	4169      	adcs	r1, r5
 8000428:	2b00      	cmp	r3, #0
 800042a:	db48      	blt.n	80004be <__divdi3+0x19a>
 800042c:	002e      	movs	r6, r5
 800042e:	002c      	movs	r4, r5
 8000430:	40de      	lsrs	r6, r3
 8000432:	4643      	mov	r3, r8
 8000434:	40dc      	lsrs	r4, r3
 8000436:	4653      	mov	r3, sl
 8000438:	2b00      	cmp	r3, #0
 800043a:	db50      	blt.n	80004de <__divdi3+0x1ba>
 800043c:	0034      	movs	r4, r6
 800043e:	409c      	lsls	r4, r3
 8000440:	0023      	movs	r3, r4
 8000442:	4644      	mov	r4, r8
 8000444:	40a6      	lsls	r6, r4
 8000446:	0032      	movs	r2, r6
 8000448:	1a80      	subs	r0, r0, r2
 800044a:	4199      	sbcs	r1, r3
 800044c:	e01e      	b.n	800048c <__divdi3+0x168>
 800044e:	2300      	movs	r3, #0
 8000450:	4262      	negs	r2, r4
 8000452:	41ab      	sbcs	r3, r5
 8000454:	0014      	movs	r4, r2
 8000456:	001d      	movs	r5, r3
 8000458:	2900      	cmp	r1, #0
 800045a:	db8b      	blt.n	8000374 <__divdi3+0x50>
 800045c:	0006      	movs	r6, r0
 800045e:	000f      	movs	r7, r1
 8000460:	4299      	cmp	r1, r3
 8000462:	d900      	bls.n	8000466 <__divdi3+0x142>
 8000464:	e771      	b.n	800034a <__divdi3+0x26>
 8000466:	d102      	bne.n	800046e <__divdi3+0x14a>
 8000468:	4290      	cmp	r0, r2
 800046a:	d900      	bls.n	800046e <__divdi3+0x14a>
 800046c:	e76d      	b.n	800034a <__divdi3+0x26>
 800046e:	2301      	movs	r3, #1
 8000470:	425b      	negs	r3, r3
 8000472:	4699      	mov	r9, r3
 8000474:	e788      	b.n	8000388 <__divdi3+0x64>
 8000476:	42a1      	cmp	r1, r4
 8000478:	d9a0      	bls.n	80003bc <__divdi3+0x98>
 800047a:	2100      	movs	r1, #0
 800047c:	2000      	movs	r0, #0
 800047e:	9000      	str	r0, [sp, #0]
 8000480:	9101      	str	r1, [sp, #4]
 8000482:	4641      	mov	r1, r8
 8000484:	2900      	cmp	r1, #0
 8000486:	d1ae      	bne.n	80003e6 <__divdi3+0xc2>
 8000488:	9800      	ldr	r0, [sp, #0]
 800048a:	9901      	ldr	r1, [sp, #4]
 800048c:	464b      	mov	r3, r9
 800048e:	2b00      	cmp	r3, #0
 8000490:	d100      	bne.n	8000494 <__divdi3+0x170>
 8000492:	e75c      	b.n	800034e <__divdi3+0x2a>
 8000494:	0003      	movs	r3, r0
 8000496:	000c      	movs	r4, r1
 8000498:	2100      	movs	r1, #0
 800049a:	4258      	negs	r0, r3
 800049c:	41a1      	sbcs	r1, r4
 800049e:	e756      	b.n	800034e <__divdi3+0x2a>
 80004a0:	4642      	mov	r2, r8
 80004a2:	0038      	movs	r0, r7
 80004a4:	469a      	mov	sl, r3
 80004a6:	2320      	movs	r3, #32
 80004a8:	0031      	movs	r1, r6
 80004aa:	4090      	lsls	r0, r2
 80004ac:	1a9b      	subs	r3, r3, r2
 80004ae:	40d9      	lsrs	r1, r3
 80004b0:	0003      	movs	r3, r0
 80004b2:	430b      	orrs	r3, r1
 80004b4:	e77b      	b.n	80003ae <__divdi3+0x8a>
 80004b6:	42a6      	cmp	r6, r4
 80004b8:	d800      	bhi.n	80004bc <__divdi3+0x198>
 80004ba:	e763      	b.n	8000384 <__divdi3+0x60>
 80004bc:	e745      	b.n	800034a <__divdi3+0x26>
 80004be:	4642      	mov	r2, r8
 80004c0:	2320      	movs	r3, #32
 80004c2:	1a9b      	subs	r3, r3, r2
 80004c4:	002a      	movs	r2, r5
 80004c6:	409a      	lsls	r2, r3
 80004c8:	0026      	movs	r6, r4
 80004ca:	0013      	movs	r3, r2
 80004cc:	4642      	mov	r2, r8
 80004ce:	40d6      	lsrs	r6, r2
 80004d0:	002c      	movs	r4, r5
 80004d2:	431e      	orrs	r6, r3
 80004d4:	4643      	mov	r3, r8
 80004d6:	40dc      	lsrs	r4, r3
 80004d8:	4653      	mov	r3, sl
 80004da:	2b00      	cmp	r3, #0
 80004dc:	daae      	bge.n	800043c <__divdi3+0x118>
 80004de:	4642      	mov	r2, r8
 80004e0:	2320      	movs	r3, #32
 80004e2:	0035      	movs	r5, r6
 80004e4:	4094      	lsls	r4, r2
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	40dd      	lsrs	r5, r3
 80004ea:	0023      	movs	r3, r4
 80004ec:	432b      	orrs	r3, r5
 80004ee:	e7a8      	b.n	8000442 <__divdi3+0x11e>
 80004f0:	4641      	mov	r1, r8
 80004f2:	2620      	movs	r6, #32
 80004f4:	2701      	movs	r7, #1
 80004f6:	1a76      	subs	r6, r6, r1
 80004f8:	2000      	movs	r0, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	40f7      	lsrs	r7, r6
 80004fe:	9000      	str	r0, [sp, #0]
 8000500:	9101      	str	r1, [sp, #4]
 8000502:	9701      	str	r7, [sp, #4]
 8000504:	e768      	b.n	80003d8 <__divdi3+0xb4>
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__clzdi2>:
 8000508:	b510      	push	{r4, lr}
 800050a:	2900      	cmp	r1, #0
 800050c:	d103      	bne.n	8000516 <__clzdi2+0xe>
 800050e:	f000 f807 	bl	8000520 <__clzsi2>
 8000512:	3020      	adds	r0, #32
 8000514:	e002      	b.n	800051c <__clzdi2+0x14>
 8000516:	0008      	movs	r0, r1
 8000518:	f000 f802 	bl	8000520 <__clzsi2>
 800051c:	bd10      	pop	{r4, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)

08000520 <__clzsi2>:
 8000520:	211c      	movs	r1, #28
 8000522:	2301      	movs	r3, #1
 8000524:	041b      	lsls	r3, r3, #16
 8000526:	4298      	cmp	r0, r3
 8000528:	d301      	bcc.n	800052e <__clzsi2+0xe>
 800052a:	0c00      	lsrs	r0, r0, #16
 800052c:	3910      	subs	r1, #16
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	4298      	cmp	r0, r3
 8000532:	d301      	bcc.n	8000538 <__clzsi2+0x18>
 8000534:	0a00      	lsrs	r0, r0, #8
 8000536:	3908      	subs	r1, #8
 8000538:	091b      	lsrs	r3, r3, #4
 800053a:	4298      	cmp	r0, r3
 800053c:	d301      	bcc.n	8000542 <__clzsi2+0x22>
 800053e:	0900      	lsrs	r0, r0, #4
 8000540:	3904      	subs	r1, #4
 8000542:	a202      	add	r2, pc, #8	@ (adr r2, 800054c <__clzsi2+0x2c>)
 8000544:	5c10      	ldrb	r0, [r2, r0]
 8000546:	1840      	adds	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	02020304 	.word	0x02020304
 8000550:	01010101 	.word	0x01010101
	...

0800055c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800055c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800055e:	0004      	movs	r4, r0
 8000560:	000e      	movs	r6, r1
 8000562:	2500      	movs	r5, #0
	for(uint8_t i = 0; i < len; i++)
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000564:	2701      	movs	r7, #1
{
 8000566:	9201      	str	r2, [sp, #4]
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000568:	0032      	movs	r2, r6
 800056a:	412a      	asrs	r2, r5
 800056c:	6863      	ldr	r3, [r4, #4]
 800056e:	0069      	lsls	r1, r5, #1
 8000570:	5ac9      	ldrh	r1, [r1, r3]
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	00a8      	lsls	r0, r5, #2
 8000576:	58c0      	ldr	r0, [r0, r3]
 8000578:	403a      	ands	r2, r7
 800057a:	f000 fcef 	bl	8000f5c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800057e:	9b01      	ldr	r3, [sp, #4]
 8000580:	3501      	adds	r5, #1
 8000582:	42ab      	cmp	r3, r5
 8000584:	d1f0      	bne.n	8000568 <lcd_write+0xc>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000586:	8aa1      	ldrh	r1, [r4, #20]
 8000588:	2201      	movs	r2, #1
 800058a:	6920      	ldr	r0, [r4, #16]
 800058c:	f000 fce6 	bl	8000f5c <HAL_GPIO_WritePin>
	DELAY(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fbcf 	bl	8000d34 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000596:	2200      	movs	r2, #0
 8000598:	8aa1      	ldrh	r1, [r4, #20]
 800059a:	6920      	ldr	r0, [r4, #16]
 800059c:	f000 fcde 	bl	8000f5c <HAL_GPIO_WritePin>
}
 80005a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080005a2 <lcd_write_command.part.0>:
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
 80005a2:	b570      	push	{r4, r5, r6, lr}
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80005a4:	2204      	movs	r2, #4
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
 80005a6:	000c      	movs	r4, r1
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80005a8:	0909      	lsrs	r1, r1, #4
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
 80005aa:	0005      	movs	r5, r0
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80005ac:	f7ff ffd6 	bl	800055c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80005b0:	210f      	movs	r1, #15
 80005b2:	0028      	movs	r0, r5
 80005b4:	2204      	movs	r2, #4
 80005b6:	4021      	ands	r1, r4
 80005b8:	f7ff ffd0 	bl	800055c <lcd_write>
}
 80005bc:	bd70      	pop	{r4, r5, r6, pc}

080005be <lcd_write_command>:
{
 80005be:	b570      	push	{r4, r5, r6, lr}
 80005c0:	0004      	movs	r4, r0
 80005c2:	000d      	movs	r5, r1
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80005c4:	2200      	movs	r2, #0
 80005c6:	8981      	ldrh	r1, [r0, #12]
 80005c8:	6880      	ldr	r0, [r0, #8]
 80005ca:	f000 fcc7 	bl	8000f5c <HAL_GPIO_WritePin>
	if(lcd->mode == LCD_4_BIT_MODE)
 80005ce:	7da3      	ldrb	r3, [r4, #22]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d104      	bne.n	80005de <lcd_write_command+0x20>
 80005d4:	0029      	movs	r1, r5
 80005d6:	0020      	movs	r0, r4
 80005d8:	f7ff ffe3 	bl	80005a2 <lcd_write_command.part.0>
}
 80005dc:	bd70      	pop	{r4, r5, r6, pc}
		lcd_write(lcd, command, LCD_BYTE);
 80005de:	2208      	movs	r2, #8
 80005e0:	0029      	movs	r1, r5
 80005e2:	0020      	movs	r0, r4
 80005e4:	f7ff ffba 	bl	800055c <lcd_write>
}
 80005e8:	e7f8      	b.n	80005dc <lcd_write_command+0x1e>

080005ea <lcd_write_data>:
{
 80005ea:	b570      	push	{r4, r5, r6, lr}
 80005ec:	0004      	movs	r4, r0
 80005ee:	000d      	movs	r5, r1
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80005f0:	2201      	movs	r2, #1
 80005f2:	8981      	ldrh	r1, [r0, #12]
 80005f4:	6880      	ldr	r0, [r0, #8]
 80005f6:	f000 fcb1 	bl	8000f5c <HAL_GPIO_WritePin>
	if(lcd->mode == LCD_4_BIT_MODE)
 80005fa:	7da3      	ldrb	r3, [r4, #22]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d104      	bne.n	800060a <lcd_write_data+0x20>
 8000600:	0029      	movs	r1, r5
 8000602:	0020      	movs	r0, r4
 8000604:	f7ff ffcd 	bl	80005a2 <lcd_write_command.part.0>
}
 8000608:	bd70      	pop	{r4, r5, r6, pc}
		lcd_write(lcd, data, LCD_BYTE);
 800060a:	2208      	movs	r2, #8
 800060c:	0029      	movs	r1, r5
 800060e:	0020      	movs	r0, r4
 8000610:	f7ff ffa4 	bl	800055c <lcd_write>
}
 8000614:	e7f8      	b.n	8000608 <lcd_write_data+0x1e>

08000616 <Lcd_init>:
{
 8000616:	b510      	push	{r4, lr}
	if(lcd->mode == LCD_4_BIT_MODE)
 8000618:	7d83      	ldrb	r3, [r0, #22]
{
 800061a:	0004      	movs	r4, r0
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800061c:	2138      	movs	r1, #56	@ 0x38
	if(lcd->mode == LCD_4_BIT_MODE)
 800061e:	2b00      	cmp	r3, #0
 8000620:	d107      	bne.n	8000632 <Lcd_init+0x1c>
			lcd_write_command(lcd, 0x33);
 8000622:	2133      	movs	r1, #51	@ 0x33
 8000624:	f7ff ffcb 	bl	80005be <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000628:	2132      	movs	r1, #50	@ 0x32
 800062a:	0020      	movs	r0, r4
 800062c:	f7ff ffc7 	bl	80005be <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000630:	2128      	movs	r1, #40	@ 0x28
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000632:	0020      	movs	r0, r4
 8000634:	f7ff ffc3 	bl	80005be <lcd_write_command>
	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000638:	0020      	movs	r0, r4
 800063a:	2101      	movs	r1, #1
 800063c:	f7ff ffbf 	bl	80005be <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);		// Lcd-on, cursor-off, no-blink
 8000640:	0020      	movs	r0, r4
 8000642:	210e      	movs	r1, #14
 8000644:	f7ff ffbb 	bl	80005be <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC  );			// Increment cursor
 8000648:	2106      	movs	r1, #6
 800064a:	0020      	movs	r0, r4
 800064c:	f7ff ffb7 	bl	80005be <lcd_write_command>
}
 8000650:	bd10      	pop	{r4, pc}

08000652 <Lcd_create>:
{
 8000652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000654:	b087      	sub	sp, #28
 8000656:	ac0e      	add	r4, sp, #56	@ 0x38
 8000658:	8826      	ldrh	r6, [r4, #0]
 800065a:	ac0f      	add	r4, sp, #60	@ 0x3c
 800065c:	7827      	ldrb	r7, [r4, #0]
	lcd.mode = mode;
 800065e:	466c      	mov	r4, sp
{
 8000660:	0005      	movs	r5, r0
 8000662:	a80c      	add	r0, sp, #48	@ 0x30
 8000664:	8800      	ldrh	r0, [r0, #0]
	lcd.en_pin = en_pin;
 8000666:	82a6      	strh	r6, [r4, #20]
	lcd.en_port = en_port;
 8000668:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
	lcd.rs_pin = rs_pin;
 800066a:	81a0      	strh	r0, [r4, #12]
	Lcd_init(&lcd);
 800066c:	0020      	movs	r0, r4
	lcd.data_pin = pin;
 800066e:	6062      	str	r2, [r4, #4]
	lcd.data_port = port;
 8000670:	9100      	str	r1, [sp, #0]
	lcd.mode = mode;
 8000672:	75a7      	strb	r7, [r4, #22]
	lcd.en_port = en_port;
 8000674:	6126      	str	r6, [r4, #16]
	lcd.rs_port = rs_port;
 8000676:	60a3      	str	r3, [r4, #8]
	Lcd_init(&lcd);
 8000678:	f7ff ffcd 	bl	8000616 <Lcd_init>
	return lcd;
 800067c:	002b      	movs	r3, r5
 800067e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000680:	c307      	stmia	r3!, {r0, r1, r2}
 8000682:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000684:	c307      	stmia	r3!, {r0, r1, r2}
}
 8000686:	0028      	movs	r0, r5
 8000688:	b007      	add	sp, #28
 800068a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800068c <Lcd_string>:
{
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	0006      	movs	r6, r0
 8000690:	000d      	movs	r5, r1
	for(uint8_t i = 0; i < strlen(string); i++)
 8000692:	2400      	movs	r4, #0
 8000694:	0028      	movs	r0, r5
 8000696:	f7ff fd37 	bl	8000108 <strlen>
 800069a:	4284      	cmp	r4, r0
 800069c:	d300      	bcc.n	80006a0 <Lcd_string+0x14>
}
 800069e:	bd70      	pop	{r4, r5, r6, pc}
		lcd_write_data(lcd, string[i]);
 80006a0:	5d29      	ldrb	r1, [r5, r4]
 80006a2:	0030      	movs	r0, r6
	for(uint8_t i = 0; i < strlen(string); i++)
 80006a4:	3401      	adds	r4, #1
		lcd_write_data(lcd, string[i]);
 80006a6:	f7ff ffa0 	bl	80005ea <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80006aa:	b2e4      	uxtb	r4, r4
 80006ac:	e7f2      	b.n	8000694 <Lcd_string+0x8>
	...

080006b0 <Lcd_cursor>:
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <Lcd_cursor+0x14>)
{
 80006b2:	b510      	push	{r4, lr}
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006b4:	5c59      	ldrb	r1, [r3, r1]
 80006b6:	3a80      	subs	r2, #128	@ 0x80
 80006b8:	1889      	adds	r1, r1, r2
 80006ba:	b2c9      	uxtb	r1, r1
 80006bc:	f7ff ff7f 	bl	80005be <lcd_write_command>
}
 80006c0:	bd10      	pop	{r4, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	08001554 	.word	0x08001554

080006c8 <Lcd_clear>:
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80006c8:	b510      	push	{r4, lr}
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80006ca:	2101      	movs	r1, #1
 80006cc:	f7ff ff77 	bl	80005be <lcd_write_command>
}
 80006d0:	bd10      	pop	{r4, pc}

080006d2 <longLongToStr>:

void longLongToStr(int64_t num, char *str) {
    int8_t i = 0;
    int8_t isNegative = 0;
 80006d2:	2300      	movs	r3, #0
void longLongToStr(int64_t num, char *str) {
 80006d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80006d6:	0004      	movs	r4, r0
 80006d8:	000d      	movs	r5, r1
 80006da:	0017      	movs	r7, r2
    int8_t isNegative = 0;
 80006dc:	9300      	str	r3, [sp, #0]

    // Xử lý số âm
    if (num < 0) {
 80006de:	4299      	cmp	r1, r3
 80006e0:	da06      	bge.n	80006f0 <longLongToStr+0x1e>
        isNegative = 1;
        num = -num;
 80006e2:	000b      	movs	r3, r1
 80006e4:	0002      	movs	r2, r0
 80006e6:	2500      	movs	r5, #0
 80006e8:	4254      	negs	r4, r2
 80006ea:	419d      	sbcs	r5, r3
        isNegative = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2600      	movs	r6, #0
    }

    // Chuyển từng chữ số sang ký tự
    do {
        str[i++] = (num % 10) + '0';
 80006f2:	0020      	movs	r0, r4
 80006f4:	0029      	movs	r1, r5
 80006f6:	220a      	movs	r2, #10
 80006f8:	2300      	movs	r3, #0
 80006fa:	f7ff fda3 	bl	8000244 <__aeabi_ldivmod>
 80006fe:	46b4      	mov	ip, r6
 8000700:	9101      	str	r1, [sp, #4]
 8000702:	4661      	mov	r1, ip
 8000704:	b2f3      	uxtb	r3, r6
 8000706:	3230      	adds	r2, #48	@ 0x30
 8000708:	1c5e      	adds	r6, r3, #1
 800070a:	46a4      	mov	ip, r4
 800070c:	547a      	strb	r2, [r7, r1]
        num /= 10;
 800070e:	0004      	movs	r4, r0
 8000710:	002a      	movs	r2, r5
        str[i++] = (num % 10) + '0';
 8000712:	b276      	sxtb	r6, r6
        num /= 10;
 8000714:	9d01      	ldr	r5, [sp, #4]
    } while (num > 0);
 8000716:	2a00      	cmp	r2, #0
 8000718:	dceb      	bgt.n	80006f2 <longLongToStr+0x20>
 800071a:	d102      	bne.n	8000722 <longLongToStr+0x50>
 800071c:	4662      	mov	r2, ip
 800071e:	2a09      	cmp	r2, #9
 8000720:	d8e7      	bhi.n	80006f2 <longLongToStr+0x20>

    // Thêm dấu trừ nếu là số âm
    if (isNegative) {
 8000722:	9a00      	ldr	r2, [sp, #0]
 8000724:	2a00      	cmp	r2, #0
 8000726:	d003      	beq.n	8000730 <longLongToStr+0x5e>
        str[i++] = '-';
 8000728:	222d      	movs	r2, #45	@ 0x2d
 800072a:	3302      	adds	r3, #2
 800072c:	55ba      	strb	r2, [r7, r6]
 800072e:	b25e      	sxtb	r6, r3
    }

    // Kết thúc chuỗi
    str[i] = '\0';
 8000730:	2300      	movs	r3, #0

    // Đảo ngược chuỗi
    for (int8_t j = 0; j < i / 2; j++) {
 8000732:	0ff1      	lsrs	r1, r6, #31
    str[i] = '\0';
 8000734:	19ba      	adds	r2, r7, r6
    for (int8_t j = 0; j < i / 2; j++) {
 8000736:	1989      	adds	r1, r1, r6
    str[i] = '\0';
 8000738:	7013      	strb	r3, [r2, #0]
    for (int8_t j = 0; j < i / 2; j++) {
 800073a:	1049      	asrs	r1, r1, #1
 800073c:	b258      	sxtb	r0, r3
 800073e:	3a01      	subs	r2, #1
 8000740:	4281      	cmp	r1, r0
 8000742:	dc00      	bgt.n	8000746 <longLongToStr+0x74>
        char temp = str[j];
        str[j] = str[i - j - 1];
        str[i - j - 1] = temp;
    }
}
 8000744:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        char temp = str[j];
 8000746:	5cf8      	ldrb	r0, [r7, r3]
        str[j] = str[i - j - 1];
 8000748:	7814      	ldrb	r4, [r2, #0]
 800074a:	54fc      	strb	r4, [r7, r3]
        str[i - j - 1] = temp;
 800074c:	7010      	strb	r0, [r2, #0]
    for (int8_t j = 0; j < i / 2; j++) {
 800074e:	3301      	adds	r3, #1
 8000750:	e7f4      	b.n	800073c <longLongToStr+0x6a>

08000752 <Lcd_int>:
{
 8000752:	b510      	push	{r4, lr}
 8000754:	0004      	movs	r4, r0
 8000756:	b086      	sub	sp, #24
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
	longLongToStr(number, buffer);
 800075c:	aa01      	add	r2, sp, #4
 800075e:	f7ff ffb8 	bl	80006d2 <longLongToStr>
	Lcd_string(lcd, buffer);
 8000762:	0020      	movs	r0, r4
 8000764:	a901      	add	r1, sp, #4
 8000766:	f7ff ff91 	bl	800068c <Lcd_string>
}
 800076a:	b006      	add	sp, #24
 800076c:	bd10      	pop	{r4, pc}
	...

08000770 <selectRow>:

int64_t kq=0;
int64_t num1=0;

void selectRow(uint8_t row)
{
 8000770:	b510      	push	{r4, lr}
	switch (row){
 8000772:	2807      	cmp	r0, #7
 8000774:	d816      	bhi.n	80007a4 <selectRow+0x34>
 8000776:	f7ff fccf 	bl	8000118 <__gnu_thumb1_case_uqi>
 800077a:	1604      	.short	0x1604
 800077c:	36342c24 	.word	0x36342c24
 8000780:	3a38      	.short	0x3a38
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000782:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
		break;
	case 4:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000784:	2090      	movs	r0, #144	@ 0x90
 8000786:	2140      	movs	r1, #64	@ 0x40
 8000788:	05c0      	lsls	r0, r0, #23
 800078a:	f000 fbe7 	bl	8000f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800078e:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
		break;
	case 6:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000790:	2090      	movs	r0, #144	@ 0x90
 8000792:	2180      	movs	r1, #128	@ 0x80
 8000794:	05c0      	lsls	r0, r0, #23
 8000796:	f000 fbe1 	bl	8000f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800079a:	2200      	movs	r2, #0
		break;
	case 7:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800079c:	2102      	movs	r1, #2
 800079e:	4815      	ldr	r0, [pc, #84]	@ (80007f4 <selectRow+0x84>)
 80007a0:	f000 fbdc 	bl	8000f5c <HAL_GPIO_WritePin>
		break;
	}
};
 80007a4:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80007a6:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80007a8:	2090      	movs	r0, #144	@ 0x90
 80007aa:	2140      	movs	r1, #64	@ 0x40
 80007ac:	05c0      	lsls	r0, r0, #23
 80007ae:	f000 fbd5 	bl	8000f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80007b2:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80007b4:	2090      	movs	r0, #144	@ 0x90
 80007b6:	2180      	movs	r1, #128	@ 0x80
 80007b8:	05c0      	lsls	r0, r0, #23
 80007ba:	f000 fbcf 	bl	8000f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	e7ec      	b.n	800079c <selectRow+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80007c2:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80007c4:	2090      	movs	r0, #144	@ 0x90
 80007c6:	2140      	movs	r1, #64	@ 0x40
 80007c8:	05c0      	lsls	r0, r0, #23
 80007ca:	f000 fbc7 	bl	8000f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	e7de      	b.n	8000790 <selectRow+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80007d2:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80007d4:	2090      	movs	r0, #144	@ 0x90
 80007d6:	2140      	movs	r1, #64	@ 0x40
 80007d8:	05c0      	lsls	r0, r0, #23
 80007da:	f000 fbbf 	bl	8000f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	e7e8      	b.n	80007b4 <selectRow+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	e7ce      	b.n	8000784 <selectRow+0x14>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	e7de      	b.n	80007a8 <selectRow+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	e7ea      	b.n	80007c4 <selectRow+0x54>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	e7f0      	b.n	80007d4 <selectRow+0x64>
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	48000400 	.word	0x48000400

080007f8 <Keypad_Getkey>:

uint8_t row;
uint8_t col;
uint8_t Keypad_Getkey()

{
 80007f8:	b570      	push	{r4, r5, r6, lr}
	for (row=0 ; row<8 ; row ++)
	{
		selectRow(row);
		HAL_Delay(2);
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 80007fa:	2580      	movs	r5, #128	@ 0x80
 80007fc:	2490      	movs	r4, #144	@ 0x90
	for (row=0 ; row<8 ; row ++)
 80007fe:	2000      	movs	r0, #0
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 8000800:	00ed      	lsls	r5, r5, #3
 8000802:	05e4      	lsls	r4, r4, #23
	for (row=0 ; row<8 ; row ++)
 8000804:	4e1c      	ldr	r6, [pc, #112]	@ (8000878 <Keypad_Getkey+0x80>)
 8000806:	7030      	strb	r0, [r6, #0]
 8000808:	2807      	cmp	r0, #7
 800080a:	d901      	bls.n	8000810 <Keypad_Getkey+0x18>
				HAL_Delay(50);
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
				return key_code[row][1];
			}
	}
	return 0;
 800080c:	2000      	movs	r0, #0
 800080e:	e017      	b.n	8000840 <Keypad_Getkey+0x48>
		selectRow(row);
 8000810:	f7ff ffae 	bl	8000770 <selectRow>
		HAL_Delay(2);
 8000814:	2002      	movs	r0, #2
 8000816:	f000 fa8d 	bl	8000d34 <HAL_Delay>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 800081a:	0029      	movs	r1, r5
 800081c:	0020      	movs	r0, r4
 800081e:	f000 fb97 	bl	8000f50 <HAL_GPIO_ReadPin>
 8000822:	2800      	cmp	r0, #0
 8000824:	d10d      	bne.n	8000842 <Keypad_Getkey+0x4a>
				HAL_Delay(50);
 8000826:	3032      	adds	r0, #50	@ 0x32
 8000828:	f000 fa84 	bl	8000d34 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 800082c:	0029      	movs	r1, r5
 800082e:	0020      	movs	r0, r4
 8000830:	f000 fb8e 	bl	8000f50 <HAL_GPIO_ReadPin>
 8000834:	2800      	cmp	r0, #0
 8000836:	d11b      	bne.n	8000870 <Keypad_Getkey+0x78>
				return key_code[row][0];
 8000838:	7832      	ldrb	r2, [r6, #0]
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <Keypad_Getkey+0x84>)
 800083c:	0052      	lsls	r2, r2, #1
 800083e:	5cd0      	ldrb	r0, [r2, r3]
}
 8000840:	bd70      	pop	{r4, r5, r6, pc}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8000842:	2180      	movs	r1, #128	@ 0x80
 8000844:	0020      	movs	r0, r4
 8000846:	0089      	lsls	r1, r1, #2
 8000848:	f000 fb82 	bl	8000f50 <HAL_GPIO_ReadPin>
 800084c:	2800      	cmp	r0, #0
 800084e:	d10f      	bne.n	8000870 <Keypad_Getkey+0x78>
				HAL_Delay(50);
 8000850:	3032      	adds	r0, #50	@ 0x32
 8000852:	f000 fa6f 	bl	8000d34 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8000856:	2180      	movs	r1, #128	@ 0x80
 8000858:	0020      	movs	r0, r4
 800085a:	0089      	lsls	r1, r1, #2
 800085c:	f000 fb78 	bl	8000f50 <HAL_GPIO_ReadPin>
 8000860:	2800      	cmp	r0, #0
 8000862:	d105      	bne.n	8000870 <Keypad_Getkey+0x78>
				return key_code[row][1];
 8000864:	7832      	ldrb	r2, [r6, #0]
 8000866:	4b05      	ldr	r3, [pc, #20]	@ (800087c <Keypad_Getkey+0x84>)
 8000868:	0052      	lsls	r2, r2, #1
 800086a:	189b      	adds	r3, r3, r2
 800086c:	7858      	ldrb	r0, [r3, #1]
 800086e:	e7e7      	b.n	8000840 <Keypad_Getkey+0x48>
	for (row=0 ; row<8 ; row ++)
 8000870:	7830      	ldrb	r0, [r6, #0]
 8000872:	3001      	adds	r0, #1
 8000874:	b2c0      	uxtb	r0, r0
 8000876:	e7c5      	b.n	8000804 <Keypad_Getkey+0xc>
 8000878:	2000002c 	.word	0x2000002c
 800087c:	08001560 	.word	0x08001560

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000882:	2510      	movs	r5, #16
{
 8000884:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	222c      	movs	r2, #44	@ 0x2c
 8000888:	2100      	movs	r1, #0
 800088a:	a805      	add	r0, sp, #20
 800088c:	f000 fe14 	bl	80014b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	2100      	movs	r1, #0
 8000892:	002a      	movs	r2, r5
 8000894:	4668      	mov	r0, sp
 8000896:	f000 fe0f 	bl	80014b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800089e:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80008a2:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a6:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80008ac:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f000 fb5b 	bl	8000f68 <HAL_RCC_OscConfig>
 80008b2:	1e01      	subs	r1, r0, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008be:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c6:	f000 fd73 	bl	80013b0 <HAL_RCC_ClockConfig>
 80008ca:	2800      	cmp	r0, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x52>
 80008ce:	b672      	cpsid	i
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <SystemClock_Config+0x50>
}
 80008d2:	b011      	add	sp, #68	@ 0x44
 80008d4:	bd30      	pop	{r4, r5, pc}
	...

080008d8 <main>:
{
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	b0a3      	sub	sp, #140	@ 0x8c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	ac16      	add	r4, sp, #88	@ 0x58
int main(void)
 80008de:	ab28      	add	r3, sp, #160	@ 0xa0
 80008e0:	9321      	str	r3, [sp, #132]	@ 0x84
  HAL_Init();
 80008e2:	f000 fa05 	bl	8000cf0 <HAL_Init>
  SystemClock_Config();
 80008e6:	f7ff ffcb 	bl	8000880 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	2214      	movs	r2, #20
 80008ec:	2100      	movs	r1, #0
 80008ee:	0020      	movs	r0, r4
 80008f0:	f000 fde2 	bl	80014b8 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	4bb7      	ldr	r3, [pc, #732]	@ (8000bd4 <main+0x2fc>)
 80008f8:	03c9      	lsls	r1, r1, #15
 80008fa:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008fc:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	430a      	orrs	r2, r1
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000904:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000906:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	9211      	str	r2, [sp, #68]	@ 0x44
 800090c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	695a      	ldr	r2, [r3, #20]
 8000910:	0289      	lsls	r1, r1, #10
 8000912:	430a      	orrs	r2, r1
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	9212      	str	r2, [sp, #72]	@ 0x48
 8000920:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	02c9      	lsls	r1, r1, #11
 8000926:	430a      	orrs	r2, r1
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800092c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	400b      	ands	r3, r1
 8000930:	9313      	str	r3, [sp, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000932:	21ff      	movs	r1, #255	@ 0xff
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000936:	f000 fb11 	bl	8000f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	48a6      	ldr	r0, [pc, #664]	@ (8000bd8 <main+0x300>)
 8000940:	f000 fb0c 	bl	8000f5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000944:	23ff      	movs	r3, #255	@ 0xff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	2090      	movs	r0, #144	@ 0x90
 8000948:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800094a:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	3bfe      	subs	r3, #254	@ 0xfe
 8000950:	001d      	movs	r5, r3
 8000952:	9317      	str	r3, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	9618      	str	r6, [sp, #96]	@ 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	9619      	str	r6, [sp, #100]	@ 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f000 fa42 	bl	8000de0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = R0_Pin;
 800095c:	2202      	movs	r2, #2
  HAL_GPIO_Init(R0_GPIO_Port, &GPIO_InitStruct);
 800095e:	0021      	movs	r1, r4
 8000960:	489d      	ldr	r0, [pc, #628]	@ (8000bd8 <main+0x300>)
  GPIO_InitStruct.Pin = R0_Pin;
 8000962:	9216      	str	r2, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	9517      	str	r5, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	9618      	str	r6, [sp, #96]	@ 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	9619      	str	r6, [sp, #100]	@ 0x64
  HAL_GPIO_Init(R0_GPIO_Port, &GPIO_InitStruct);
 800096a:	f000 fa39 	bl	8000de0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 800096e:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	2090      	movs	r0, #144	@ 0x90
 8000972:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8000974:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000978:	9518      	str	r5, [sp, #96]	@ 0x60
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 800097a:	9316      	str	r3, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	9617      	str	r6, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f000 fa2f 	bl	8000de0 <HAL_GPIO_Init>
    Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8000982:	4b96      	ldr	r3, [pc, #600]	@ (8000bdc <main+0x304>)
int main(void)
 8000984:	af1b      	add	r7, sp, #108	@ 0x6c
    Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8000986:	469c      	mov	ip, r3
 8000988:	0023      	movs	r3, r4
 800098a:	4662      	mov	r2, ip
 800098c:	ca23      	ldmia	r2!, {r0, r1, r5}
 800098e:	c323      	stmia	r3!, {r0, r1, r5}
    Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8000990:	4661      	mov	r1, ip
    Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8000992:	6812      	ldr	r2, [r2, #0]
    Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8000994:	3110      	adds	r1, #16
    Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8000996:	601a      	str	r2, [r3, #0]
    Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8000998:	a814      	add	r0, sp, #80	@ 0x50
 800099a:	2208      	movs	r2, #8
 800099c:	f000 fdb8 	bl	8001510 <memcpy>
    lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 80009a0:	2390      	movs	r3, #144	@ 0x90
 80009a2:	05db      	lsls	r3, r3, #23
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	2301      	movs	r3, #1
 80009a8:	2202      	movs	r2, #2
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2390      	movs	r3, #144	@ 0x90
 80009ae:	0021      	movs	r1, r4
 80009b0:	a80a      	add	r0, sp, #40	@ 0x28
 80009b2:	9202      	str	r2, [sp, #8]
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	aa14      	add	r2, sp, #80	@ 0x50
 80009b8:	9603      	str	r6, [sp, #12]
 80009ba:	f7ff fe4a 	bl	8000652 <Lcd_create>
 80009be:	003b      	movs	r3, r7
 80009c0:	ad0a      	add	r5, sp, #40	@ 0x28
 80009c2:	cd07      	ldmia	r5!, {r0, r1, r2}
 80009c4:	c307      	stmia	r3!, {r0, r1, r2}
 80009c6:	cd07      	ldmia	r5!, {r0, r1, r2}
 80009c8:	c307      	stmia	r3!, {r0, r1, r2}
    Lcd_cursor(&lcd, 0,0);
 80009ca:	0032      	movs	r2, r6
 80009cc:	0031      	movs	r1, r6
 80009ce:	0038      	movs	r0, r7
 80009d0:	f7ff fe6e 	bl	80006b0 <Lcd_cursor>
	  key_current = Keypad_Getkey();
 80009d4:	f7ff ff10 	bl	80007f8 <Keypad_Getkey>
 80009d8:	4b81      	ldr	r3, [pc, #516]	@ (8000be0 <main+0x308>)
 80009da:	0002      	movs	r2, r0
 80009dc:	7018      	strb	r0, [r3, #0]
    	if ( key_current != key_last )
 80009de:	4b81      	ldr	r3, [pc, #516]	@ (8000be4 <main+0x30c>)
	  key_current = Keypad_Getkey();
 80009e0:	0004      	movs	r4, r0
    	if ( key_current != key_last )
 80009e2:	781d      	ldrb	r5, [r3, #0]
 80009e4:	42a8      	cmp	r0, r5
 80009e6:	d0f5      	beq.n	80009d4 <main+0xfc>
    		if ( key_current !=0 ) Press(key_current);
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d100      	bne.n	80009ee <main+0x116>
 80009ec:	e0b0      	b.n	8000b50 <main+0x278>
    	if ((key==1) || (key==2) || (key==3) || (key==4) || (key==5) || (key==6) || (key==7) || (key==8) || (key==9) || (key==ko))
 80009ee:	1e43      	subs	r3, r0, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d902      	bls.n	80009fc <main+0x124>
 80009f6:	2810      	cmp	r0, #16
 80009f8:	d105      	bne.n	8000a06 <main+0x12e>
    			key=0;
 80009fa:	2200      	movs	r2, #0
    			Lcd_int(&lcd, key);
 80009fc:	2300      	movs	r3, #0
    		Lcd_int(&lcd, kq);
 80009fe:	0038      	movs	r0, r7
 8000a00:	f7ff fea7 	bl	8000752 <Lcd_int>
    	if (key==DEL)
 8000a04:	e00a      	b.n	8000a1c <main+0x144>
    	if ((key==cong))
 8000a06:	280b      	cmp	r0, #11
 8000a08:	d10d      	bne.n	8000a26 <main+0x14e>
    		Lcd_string(&lcd, "+");
 8000a0a:	4977      	ldr	r1, [pc, #476]	@ (8000be8 <main+0x310>)
 8000a0c:	0038      	movs	r0, r7
 8000a0e:	f7ff fe3d 	bl	800068c <Lcd_string>
    		equaltion[pos] = 1;
 8000a12:	2101      	movs	r1, #1
 8000a14:	4a75      	ldr	r2, [pc, #468]	@ (8000bec <main+0x314>)
 8000a16:	4b76      	ldr	r3, [pc, #472]	@ (8000bf0 <main+0x318>)
 8000a18:	7812      	ldrb	r2, [r2, #0]
    		equaltion[pos] = 4;
 8000a1a:	5499      	strb	r1, [r3, r2]
    		key_last = key_current;
 8000a1c:	4a70      	ldr	r2, [pc, #448]	@ (8000be0 <main+0x308>)
 8000a1e:	4b71      	ldr	r3, [pc, #452]	@ (8000be4 <main+0x30c>)
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e7d6      	b.n	80009d4 <main+0xfc>
    	else if ((key==tru))
 8000a26:	280c      	cmp	r0, #12
 8000a28:	d108      	bne.n	8000a3c <main+0x164>
    		Lcd_string(&lcd, "-");
 8000a2a:	4972      	ldr	r1, [pc, #456]	@ (8000bf4 <main+0x31c>)
 8000a2c:	0038      	movs	r0, r7
 8000a2e:	f7ff fe2d 	bl	800068c <Lcd_string>
    		equaltion[pos] = 2;
 8000a32:	4a6e      	ldr	r2, [pc, #440]	@ (8000bec <main+0x314>)
 8000a34:	2102      	movs	r1, #2
 8000a36:	4b6e      	ldr	r3, [pc, #440]	@ (8000bf0 <main+0x318>)
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	e7ee      	b.n	8000a1a <main+0x142>
    	else if ((key==nhan))
 8000a3c:	280d      	cmp	r0, #13
 8000a3e:	d108      	bne.n	8000a52 <main+0x17a>
    		Lcd_string(&lcd, "x");
 8000a40:	496d      	ldr	r1, [pc, #436]	@ (8000bf8 <main+0x320>)
 8000a42:	0038      	movs	r0, r7
 8000a44:	f7ff fe22 	bl	800068c <Lcd_string>
    		equaltion[pos] = 3;
 8000a48:	4a68      	ldr	r2, [pc, #416]	@ (8000bec <main+0x314>)
 8000a4a:	2103      	movs	r1, #3
 8000a4c:	4b68      	ldr	r3, [pc, #416]	@ (8000bf0 <main+0x318>)
 8000a4e:	7812      	ldrb	r2, [r2, #0]
 8000a50:	e7e3      	b.n	8000a1a <main+0x142>
    	else if ((key==chia))
 8000a52:	280e      	cmp	r0, #14
 8000a54:	d108      	bne.n	8000a68 <main+0x190>
    		Lcd_string(&lcd, ":");
 8000a56:	4969      	ldr	r1, [pc, #420]	@ (8000bfc <main+0x324>)
 8000a58:	0038      	movs	r0, r7
 8000a5a:	f7ff fe17 	bl	800068c <Lcd_string>
    		equaltion[pos] = 4;
 8000a5e:	4a63      	ldr	r2, [pc, #396]	@ (8000bec <main+0x314>)
 8000a60:	2104      	movs	r1, #4
 8000a62:	4b63      	ldr	r3, [pc, #396]	@ (8000bf0 <main+0x318>)
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	e7d8      	b.n	8000a1a <main+0x142>
    	if (key==bang)
 8000a68:	280f      	cmp	r0, #15
 8000a6a:	d165      	bne.n	8000b38 <main+0x260>
    		num[pos] = num1;
 8000a6c:	4b64      	ldr	r3, [pc, #400]	@ (8000c00 <main+0x328>)
 8000a6e:	4e65      	ldr	r6, [pc, #404]	@ (8000c04 <main+0x32c>)
 8000a70:	9308      	str	r3, [sp, #32]
 8000a72:	4b5e      	ldr	r3, [pc, #376]	@ (8000bec <main+0x314>)
 8000a74:	9a08      	ldr	r2, [sp, #32]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	9c08      	ldr	r4, [sp, #32]
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	4a62      	ldr	r2, [pc, #392]	@ (8000c08 <main+0x330>)
 8000a80:	0025      	movs	r5, r4
 8000a82:	6810      	ldr	r0, [r2, #0]
 8000a84:	6851      	ldr	r1, [r2, #4]
 8000a86:	6018      	str	r0, [r3, #0]
 8000a88:	6059      	str	r1, [r3, #4]
    		for(uint8_t i = 0; i < 9; i++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9305      	str	r3, [sp, #20]
    				else equaltion[i] = 1;
 8000a8e:	4b58      	ldr	r3, [pc, #352]	@ (8000bf0 <main+0x318>)
 8000a90:	9309      	str	r3, [sp, #36]	@ 0x24
    			if (equaltion[i] == 3)
 8000a92:	7873      	ldrb	r3, [r6, #1]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d12c      	bne.n	8000af2 <main+0x21a>
    				num[i+1] = num[i] * num[i+1];
 8000a98:	682a      	ldr	r2, [r5, #0]
 8000a9a:	686b      	ldr	r3, [r5, #4]
 8000a9c:	68a8      	ldr	r0, [r5, #8]
 8000a9e:	68e9      	ldr	r1, [r5, #12]
 8000aa0:	f7ff fbf4 	bl	800028c <__aeabi_lmul>
    				num[i] = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	602a      	str	r2, [r5, #0]
 8000aaa:	606b      	str	r3, [r5, #4]
    				if (i>0)
 8000aac:	9b05      	ldr	r3, [sp, #20]
    				num[i+1] = num[i] / num[i+1];
 8000aae:	60a8      	str	r0, [r5, #8]
 8000ab0:	60e9      	str	r1, [r5, #12]
    				if (i>0)
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <main+0x1e4>
    					equaltion[i] = equaltion[i-1];
 8000ab6:	7833      	ldrb	r3, [r6, #0]
 8000ab8:	7073      	strb	r3, [r6, #1]
 8000aba:	e002      	b.n	8000ac2 <main+0x1ea>
    				else equaltion[i] = 1;
 8000abc:	2201      	movs	r2, #1
 8000abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ac0:	701a      	strb	r2, [r3, #0]
    		for(uint8_t i = 0; i < 9; i++)
 8000ac2:	9b05      	ldr	r3, [sp, #20]
 8000ac4:	3508      	adds	r5, #8
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	9305      	str	r3, [sp, #20]
 8000acc:	3601      	adds	r6, #1
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d1df      	bne.n	8000a92 <main+0x1ba>
 8000ad2:	2500      	movs	r5, #0
    			if (equaltion[i] == 1)
 8000ad4:	4e46      	ldr	r6, [pc, #280]	@ (8000bf0 <main+0x318>)
 8000ad6:	5d72      	ldrb	r2, [r6, r5]
 8000ad8:	2a01      	cmp	r2, #1
 8000ada:	d113      	bne.n	8000b04 <main+0x22c>
    				num[i+1] = num[i] + num[i+1];
 8000adc:	68a2      	ldr	r2, [r4, #8]
 8000ade:	68e3      	ldr	r3, [r4, #12]
 8000ae0:	6820      	ldr	r0, [r4, #0]
 8000ae2:	6861      	ldr	r1, [r4, #4]
 8000ae4:	1812      	adds	r2, r2, r0
 8000ae6:	414b      	adcs	r3, r1
    				num[i+1] = num[i] - num[i+1];
 8000ae8:	60a2      	str	r2, [r4, #8]
 8000aea:	60e3      	str	r3, [r4, #12]
    		for(uint8_t i = 0; i < 10; i++)
 8000aec:	3501      	adds	r5, #1
 8000aee:	3408      	adds	r4, #8
 8000af0:	e7f1      	b.n	8000ad6 <main+0x1fe>
    			else if (equaltion[i] == 4)
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d1e5      	bne.n	8000ac2 <main+0x1ea>
    				num[i+1] = num[i] / num[i+1];
 8000af6:	68aa      	ldr	r2, [r5, #8]
 8000af8:	68eb      	ldr	r3, [r5, #12]
 8000afa:	6828      	ldr	r0, [r5, #0]
 8000afc:	6869      	ldr	r1, [r5, #4]
 8000afe:	f7ff fba1 	bl	8000244 <__aeabi_ldivmod>
 8000b02:	e7cf      	b.n	8000aa4 <main+0x1cc>
    			else if (equaltion[i] == 2)
 8000b04:	2a02      	cmp	r2, #2
 8000b06:	d106      	bne.n	8000b16 <main+0x23e>
    				num[i+1] = num[i] - num[i+1];
 8000b08:	6822      	ldr	r2, [r4, #0]
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	68a0      	ldr	r0, [r4, #8]
 8000b0e:	68e1      	ldr	r1, [r4, #12]
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	418b      	sbcs	r3, r1
 8000b14:	e7e8      	b.n	8000ae8 <main+0x210>
    			else if (equaltion[i] == 0) {
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d1e8      	bne.n	8000aec <main+0x214>
    				kq = num[i];
 8000b1a:	9b08      	ldr	r3, [sp, #32]
 8000b1c:	4c3b      	ldr	r4, [pc, #236]	@ (8000c0c <main+0x334>)
 8000b1e:	00ed      	lsls	r5, r5, #3
 8000b20:	195d      	adds	r5, r3, r5
 8000b22:	6828      	ldr	r0, [r5, #0]
 8000b24:	6869      	ldr	r1, [r5, #4]
 8000b26:	6020      	str	r0, [r4, #0]
 8000b28:	6061      	str	r1, [r4, #4]
    		Lcd_cursor(&lcd, 1, 0);
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	0038      	movs	r0, r7
 8000b2e:	f7ff fdbf 	bl	80006b0 <Lcd_cursor>
    		Lcd_int(&lcd, kq);
 8000b32:	6822      	ldr	r2, [r4, #0]
 8000b34:	6863      	ldr	r3, [r4, #4]
 8000b36:	e762      	b.n	80009fe <main+0x126>
    	if (key==DEL)
 8000b38:	280a      	cmp	r0, #10
 8000b3a:	d000      	beq.n	8000b3e <main+0x266>
 8000b3c:	e76e      	b.n	8000a1c <main+0x144>
    		Lcd_clear(&lcd);
 8000b3e:	0038      	movs	r0, r7
 8000b40:	f7ff fdc2 	bl	80006c8 <Lcd_clear>
    		Lcd_cursor(&lcd, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	0038      	movs	r0, r7
 8000b48:	0011      	movs	r1, r2
 8000b4a:	f7ff fdb1 	bl	80006b0 <Lcd_cursor>
 8000b4e:	e765      	b.n	8000a1c <main+0x144>
    	  if ((key==1) || (key==2) || (key==3) || (key==4) || (key==5) || (key==6) || (key==7) || (key==8) || (key==9) || (key==ko))
 8000b50:	1e6b      	subs	r3, r5, #1
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	d902      	bls.n	8000b5c <main+0x284>
 8000b56:	2d10      	cmp	r5, #16
 8000b58:	d111      	bne.n	8000b7e <main+0x2a6>
    			  key=0;
 8000b5a:	0005      	movs	r5, r0
    	 	  num1 = num1*10 + key;
 8000b5c:	4c2a      	ldr	r4, [pc, #168]	@ (8000c08 <main+0x330>)
 8000b5e:	220a      	movs	r2, #10
 8000b60:	6820      	ldr	r0, [r4, #0]
 8000b62:	6861      	ldr	r1, [r4, #4]
 8000b64:	2300      	movs	r3, #0
 8000b66:	f7ff fb91 	bl	800028c <__aeabi_lmul>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9506      	str	r5, [sp, #24]
 8000b6e:	9307      	str	r3, [sp, #28]
 8000b70:	9a06      	ldr	r2, [sp, #24]
 8000b72:	9b07      	ldr	r3, [sp, #28]
 8000b74:	1880      	adds	r0, r0, r2
 8000b76:	4159      	adcs	r1, r3
 8000b78:	6020      	str	r0, [r4, #0]
 8000b7a:	6061      	str	r1, [r4, #4]
    	  if ((key==cong) || (key==tru) || (key==nhan) || (key==chia))
 8000b7c:	e74e      	b.n	8000a1c <main+0x144>
 8000b7e:	002b      	movs	r3, r5
 8000b80:	3b0b      	subs	r3, #11
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d810      	bhi.n	8000ba8 <main+0x2d0>
    		  num[pos] = num1;
 8000b86:	4c19      	ldr	r4, [pc, #100]	@ (8000bec <main+0x314>)
 8000b88:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <main+0x328>)
 8000b8a:	7822      	ldrb	r2, [r4, #0]
 8000b8c:	4d1e      	ldr	r5, [pc, #120]	@ (8000c08 <main+0x330>)
 8000b8e:	00d1      	lsls	r1, r2, #3
 8000b90:	185b      	adds	r3, r3, r1
 8000b92:	6828      	ldr	r0, [r5, #0]
 8000b94:	6869      	ldr	r1, [r5, #4]
 8000b96:	6018      	str	r0, [r3, #0]
 8000b98:	6059      	str	r1, [r3, #4]
    		  num1 = 0; //reset num1
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	2100      	movs	r1, #0
    		  pos++;
 8000b9e:	3201      	adds	r2, #1
    		  num1 = 0; //reset num1
 8000ba0:	6028      	str	r0, [r5, #0]
 8000ba2:	6069      	str	r1, [r5, #4]
    		  pos++;
 8000ba4:	7022      	strb	r2, [r4, #0]
    	  if (key==DEL)
 8000ba6:	e739      	b.n	8000a1c <main+0x144>
 8000ba8:	2d0a      	cmp	r5, #10
 8000baa:	d000      	beq.n	8000bae <main+0x2d6>
 8000bac:	e736      	b.n	8000a1c <main+0x144>
    		  num1=0;
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <main+0x330>)
 8000bb4:	6019      	str	r1, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
    		  pos=0;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <main+0x314>)
    		      equaltion[i] = 0;
 8000bba:	0021      	movs	r1, r4
    		  pos=0;
 8000bbc:	7018      	strb	r0, [r3, #0]
    		      equaltion[i] = 0;
 8000bbe:	2209      	movs	r2, #9
 8000bc0:	480b      	ldr	r0, [pc, #44]	@ (8000bf0 <main+0x318>)
 8000bc2:	f000 fc79 	bl	80014b8 <memset>
    		      num[i] = 0;
 8000bc6:	2250      	movs	r2, #80	@ 0x50
 8000bc8:	0021      	movs	r1, r4
 8000bca:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <main+0x328>)
 8000bcc:	f000 fc74 	bl	80014b8 <memset>
 8000bd0:	e724      	b.n	8000a1c <main+0x144>
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	0800153c 	.word	0x0800153c
 8000be0:	20000041 	.word	0x20000041
 8000be4:	20000040 	.word	0x20000040
 8000be8:	08001558 	.word	0x08001558
 8000bec:	20000042 	.word	0x20000042
 8000bf0:	20000043 	.word	0x20000043
 8000bf4:	0800155a 	.word	0x0800155a
 8000bf8:	0800155c 	.word	0x0800155c
 8000bfc:	0800155e 	.word	0x0800155e
 8000c00:	20000050 	.word	0x20000050
 8000c04:	20000042 	.word	0x20000042
 8000c08:	20000030 	.word	0x20000030
 8000c0c:	20000038 	.word	0x20000038

08000c10 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c10:	2101      	movs	r1, #1
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_MspInit+0x2c>)
{
 8000c14:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	619a      	str	r2, [r3, #24]
 8000c1c:	699a      	ldr	r2, [r3, #24]
 8000c1e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	69da      	ldr	r2, [r3, #28]
 8000c28:	0549      	lsls	r1, r1, #21
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	61da      	str	r2, [r3, #28]
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	400b      	ands	r3, r1
 8000c32:	9301      	str	r3, [sp, #4]
 8000c34:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	b002      	add	sp, #8
 8000c38:	4770      	bx	lr
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	40021000 	.word	0x40021000

08000c40 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler>

08000c42 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler>

08000c44 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4a:	f000 f861 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4e:	bd10      	pop	{r4, pc}

08000c50 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c50:	4770      	bx	lr
	...

08000c54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c58:	f7ff fffa 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c82:	f000 fc21 	bl	80014c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c86:	f7ff fe27 	bl	80008d8 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   r0, =_estack
 8000c8c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c98:	080015b0 	.word	0x080015b0
  ldr r2, =_sbss
 8000c9c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ca0:	200000a4 	.word	0x200000a4

08000ca4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_IRQHandler>
	...

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	20fa      	movs	r0, #250	@ 0xfa
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <HAL_InitTick+0x3c>)
 8000cb0:	0080      	lsls	r0, r0, #2
 8000cb2:	7819      	ldrb	r1, [r3, #0]
 8000cb4:	f7ff fa3a 	bl	800012c <__udivsi3>
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	@ (8000ce8 <HAL_InitTick+0x40>)
 8000cba:	0001      	movs	r1, r0
 8000cbc:	6820      	ldr	r0, [r4, #0]
 8000cbe:	f7ff fa35 	bl	800012c <__udivsi3>
 8000cc2:	f000 f873 	bl	8000dac <HAL_SYSTICK_Config>
 8000cc6:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000cc8:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d109      	bne.n	8000ce2 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	2d03      	cmp	r5, #3
 8000cd0:	d807      	bhi.n	8000ce2 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	0022      	movs	r2, r4
 8000cd6:	0029      	movs	r1, r5
 8000cd8:	f000 f83e 	bl	8000d58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	0020      	movs	r0, r4
 8000cde:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <HAL_InitTick+0x44>)
 8000ce0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	20000004 	.word	0x20000004
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_Init+0x1c>)
{
 8000cf4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	f7ff ffd3 	bl	8000ca8 <HAL_InitTick>
  HAL_MspInit();
 8000d02:	f7ff ff85 	bl	8000c10 <HAL_MspInit>
}
 8000d06:	2000      	movs	r0, #0
 8000d08:	bd10      	pop	{r4, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	40022000 	.word	0x40022000

08000d10 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d10:	4a03      	ldr	r2, [pc, #12]	@ (8000d20 <HAL_IncTick+0x10>)
 8000d12:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <HAL_IncTick+0x14>)
 8000d14:	6811      	ldr	r1, [r2, #0]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	185b      	adds	r3, r3, r1
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	4770      	bx	lr
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	200000a0 	.word	0x200000a0
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d28:	4b01      	ldr	r3, [pc, #4]	@ (8000d30 <HAL_GetTick+0x8>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
}
 8000d2c:	4770      	bx	lr
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	200000a0 	.word	0x200000a0

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff fff6 	bl	8000d28 <HAL_GetTick>
 8000d3c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	1c63      	adds	r3, r4, #1
 8000d40:	d002      	beq.n	8000d48 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <HAL_Delay+0x20>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	1b40      	subs	r0, r0, r5
 8000d4e:	42a0      	cmp	r0, r4
 8000d50:	d3fa      	bcc.n	8000d48 <HAL_Delay+0x14>
  {
  }
}
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5a:	24ff      	movs	r4, #255	@ 0xff
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	000b      	movs	r3, r1
 8000d60:	0021      	movs	r1, r4
 8000d62:	4002      	ands	r2, r0
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6c:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000d70:	2800      	cmp	r0, #0
 8000d72:	db0a      	blt.n	8000d8a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d74:	24c0      	movs	r4, #192	@ 0xc0
 8000d76:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <HAL_NVIC_SetPriority+0x4c>)
 8000d78:	0880      	lsrs	r0, r0, #2
 8000d7a:	0080      	lsls	r0, r0, #2
 8000d7c:	1880      	adds	r0, r0, r2
 8000d7e:	00a4      	lsls	r4, r4, #2
 8000d80:	5902      	ldr	r2, [r0, r4]
 8000d82:	400a      	ands	r2, r1
 8000d84:	4313      	orrs	r3, r2
 8000d86:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000d88:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	4010      	ands	r0, r2
 8000d8e:	3808      	subs	r0, #8
 8000d90:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <HAL_NVIC_SetPriority+0x50>)
 8000d92:	0880      	lsrs	r0, r0, #2
 8000d94:	0080      	lsls	r0, r0, #2
 8000d96:	1880      	adds	r0, r0, r2
 8000d98:	69c2      	ldr	r2, [r0, #28]
 8000d9a:	4011      	ands	r1, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	61c1      	str	r1, [r0, #28]
 8000da0:	e7f2      	b.n	8000d88 <HAL_NVIC_SetPriority+0x30>
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	1e43      	subs	r3, r0, #1
 8000db0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d20d      	bcs.n	8000dd4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db8:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	6a03      	ldr	r3, [r0, #32]
 8000dc2:	0609      	lsls	r1, r1, #24
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dd4:	4770      	bx	lr
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	e000e010 	.word	0xe000e010
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000de0:	2300      	movs	r3, #0
{
 8000de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de4:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	680a      	ldr	r2, [r1, #0]
 8000de8:	0014      	movs	r4, r2
 8000dea:	40dc      	lsrs	r4, r3
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000dee:	b007      	add	sp, #28
 8000df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df2:	2501      	movs	r5, #1
 8000df4:	0014      	movs	r4, r2
 8000df6:	409d      	lsls	r5, r3
 8000df8:	402c      	ands	r4, r5
 8000dfa:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000dfc:	422a      	tst	r2, r5
 8000dfe:	d100      	bne.n	8000e02 <HAL_GPIO_Init+0x22>
 8000e00:	e098      	b.n	8000f34 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e02:	684a      	ldr	r2, [r1, #4]
 8000e04:	005f      	lsls	r7, r3, #1
 8000e06:	4694      	mov	ip, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4664      	mov	r4, ip
 8000e0c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e0e:	2403      	movs	r4, #3
 8000e10:	40bc      	lsls	r4, r7
 8000e12:	43e4      	mvns	r4, r4
 8000e14:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e16:	1e54      	subs	r4, r2, #1
 8000e18:	2c01      	cmp	r4, #1
 8000e1a:	d82e      	bhi.n	8000e7a <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000e1c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e1e:	9c01      	ldr	r4, [sp, #4]
 8000e20:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e22:	68cc      	ldr	r4, [r1, #12]
 8000e24:	40bc      	lsls	r4, r7
 8000e26:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000e28:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e2a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2c:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2e:	43ac      	bics	r4, r5
 8000e30:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e32:	4664      	mov	r4, ip
 8000e34:	0924      	lsrs	r4, r4, #4
 8000e36:	4034      	ands	r4, r6
 8000e38:	409c      	lsls	r4, r3
 8000e3a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000e3c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000e3e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e40:	9c01      	ldr	r4, [sp, #4]
 8000e42:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e44:	688c      	ldr	r4, [r1, #8]
 8000e46:	40bc      	lsls	r4, r7
 8000e48:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000e4a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4c:	2a02      	cmp	r2, #2
 8000e4e:	d116      	bne.n	8000e7e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e50:	2507      	movs	r5, #7
 8000e52:	260f      	movs	r6, #15
 8000e54:	401d      	ands	r5, r3
 8000e56:	00ad      	lsls	r5, r5, #2
 8000e58:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000e5a:	08dc      	lsrs	r4, r3, #3
 8000e5c:	00a4      	lsls	r4, r4, #2
 8000e5e:	1904      	adds	r4, r0, r4
 8000e60:	9402      	str	r4, [sp, #8]
 8000e62:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e64:	9603      	str	r6, [sp, #12]
 8000e66:	0026      	movs	r6, r4
 8000e68:	9c03      	ldr	r4, [sp, #12]
 8000e6a:	43a6      	bics	r6, r4
 8000e6c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e6e:	690e      	ldr	r6, [r1, #16]
 8000e70:	40ae      	lsls	r6, r5
 8000e72:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000e74:	9c02      	ldr	r4, [sp, #8]
 8000e76:	6226      	str	r6, [r4, #32]
 8000e78:	e001      	b.n	8000e7e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7a:	2a03      	cmp	r2, #3
 8000e7c:	d1df      	bne.n	8000e3e <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000e80:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e82:	9d01      	ldr	r5, [sp, #4]
 8000e84:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e86:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e88:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000e8a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e8c:	4662      	mov	r2, ip
 8000e8e:	02a4      	lsls	r4, r4, #10
 8000e90:	4222      	tst	r2, r4
 8000e92:	d04f      	beq.n	8000f34 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e94:	2501      	movs	r5, #1
 8000e96:	4a28      	ldr	r2, [pc, #160]	@ (8000f38 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e98:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e9c:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	432c      	orrs	r4, r5
 8000ea0:	6194      	str	r4, [r2, #24]
 8000ea2:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea4:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	402a      	ands	r2, r5
 8000ea8:	9205      	str	r2, [sp, #20]
 8000eaa:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000eac:	4a23      	ldr	r2, [pc, #140]	@ (8000f3c <HAL_GPIO_Init+0x15c>)
 8000eae:	00a4      	lsls	r4, r4, #2
 8000eb0:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	3502      	adds	r5, #2
 8000eb6:	401d      	ands	r5, r3
 8000eb8:	00ad      	lsls	r5, r5, #2
 8000eba:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ebc:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ebe:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	42b8      	cmp	r0, r7
 8000ec4:	d00c      	beq.n	8000ee0 <HAL_GPIO_Init+0x100>
 8000ec6:	4f1e      	ldr	r7, [pc, #120]	@ (8000f40 <HAL_GPIO_Init+0x160>)
 8000ec8:	3201      	adds	r2, #1
 8000eca:	42b8      	cmp	r0, r7
 8000ecc:	d008      	beq.n	8000ee0 <HAL_GPIO_Init+0x100>
 8000ece:	4f1d      	ldr	r7, [pc, #116]	@ (8000f44 <HAL_GPIO_Init+0x164>)
 8000ed0:	3201      	adds	r2, #1
 8000ed2:	42b8      	cmp	r0, r7
 8000ed4:	d004      	beq.n	8000ee0 <HAL_GPIO_Init+0x100>
 8000ed6:	4f1c      	ldr	r7, [pc, #112]	@ (8000f48 <HAL_GPIO_Init+0x168>)
 8000ed8:	3203      	adds	r2, #3
 8000eda:	42b8      	cmp	r0, r7
 8000edc:	d100      	bne.n	8000ee0 <HAL_GPIO_Init+0x100>
 8000ede:	3a02      	subs	r2, #2
 8000ee0:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee2:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee4:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee6:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000ee8:	4a18      	ldr	r2, [pc, #96]	@ (8000f4c <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 8000eea:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000eec:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000eee:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8000ef0:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000ef2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef4:	02ff      	lsls	r7, r7, #11
 8000ef6:	d401      	bmi.n	8000efc <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8000ef8:	0035      	movs	r5, r6
 8000efa:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000efc:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000efe:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000f00:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000f02:	9d00      	ldr	r5, [sp, #0]
 8000f04:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f06:	02bf      	lsls	r7, r7, #10
 8000f08:	d401      	bmi.n	8000f0e <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 8000f0a:	0035      	movs	r5, r6
 8000f0c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f0e:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000f10:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000f12:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000f14:	9d00      	ldr	r5, [sp, #0]
 8000f16:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f18:	03bf      	lsls	r7, r7, #14
 8000f1a:	d401      	bmi.n	8000f20 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8000f1c:	0035      	movs	r5, r6
 8000f1e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f20:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000f22:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000f24:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000f26:	9e00      	ldr	r6, [sp, #0]
 8000f28:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f2a:	03ff      	lsls	r7, r7, #15
 8000f2c:	d401      	bmi.n	8000f32 <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 8000f2e:	4025      	ands	r5, r4
 8000f30:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000f32:	6016      	str	r6, [r2, #0]
    position++;
 8000f34:	3301      	adds	r3, #1
 8000f36:	e756      	b.n	8000de6 <HAL_GPIO_Init+0x6>
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	48000400 	.word	0x48000400
 8000f44:	48000800 	.word	0x48000800
 8000f48:	48000c00 	.word	0x48000c00
 8000f4c:	40010400 	.word	0x40010400

08000f50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f50:	6900      	ldr	r0, [r0, #16]
 8000f52:	4008      	ands	r0, r1
 8000f54:	1e43      	subs	r3, r0, #1
 8000f56:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000f58:	b2c0      	uxtb	r0, r0
  }
 8000f5a:	4770      	bx	lr

08000f5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f60:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f62:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f64:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000f66:	e7fc      	b.n	8000f62 <HAL_GPIO_WritePin+0x6>

08000f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	0004      	movs	r4, r0
 8000f6c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	d045      	beq.n	8000ffe <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f72:	6803      	ldr	r3, [r0, #0]
 8000f74:	07db      	lsls	r3, r3, #31
 8000f76:	d42f      	bmi.n	8000fd8 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	079b      	lsls	r3, r3, #30
 8000f7c:	d500      	bpl.n	8000f80 <HAL_RCC_OscConfig+0x18>
 8000f7e:	e081      	b.n	8001084 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	071b      	lsls	r3, r3, #28
 8000f84:	d500      	bpl.n	8000f88 <HAL_RCC_OscConfig+0x20>
 8000f86:	e0bc      	b.n	8001102 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	075b      	lsls	r3, r3, #29
 8000f8c:	d500      	bpl.n	8000f90 <HAL_RCC_OscConfig+0x28>
 8000f8e:	e0df      	b.n	8001150 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	06db      	lsls	r3, r3, #27
 8000f94:	d51a      	bpl.n	8000fcc <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f96:	6962      	ldr	r2, [r4, #20]
 8000f98:	2304      	movs	r3, #4
 8000f9a:	4db4      	ldr	r5, [pc, #720]	@ (800126c <HAL_RCC_OscConfig+0x304>)
 8000f9c:	2a01      	cmp	r2, #1
 8000f9e:	d000      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x3a>
 8000fa0:	e148      	b.n	8001234 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fa2:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fa4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000faa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000fac:	431a      	orrs	r2, r3
 8000fae:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000fb0:	f7ff feba 	bl	8000d28 <HAL_GetTick>
 8000fb4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fb6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000fb8:	423b      	tst	r3, r7
 8000fba:	d100      	bne.n	8000fbe <HAL_RCC_OscConfig+0x56>
 8000fbc:	e133      	b.n	8001226 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fbe:	21f8      	movs	r1, #248	@ 0xf8
 8000fc0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8000fc2:	69a3      	ldr	r3, [r4, #24]
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fcc:	6a23      	ldr	r3, [r4, #32]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d000      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x6c>
 8000fd2:	e157      	b.n	8001284 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	e02a      	b.n	800102e <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fd8:	220c      	movs	r2, #12
 8000fda:	4da4      	ldr	r5, [pc, #656]	@ (800126c <HAL_RCC_OscConfig+0x304>)
 8000fdc:	686b      	ldr	r3, [r5, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d006      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe4:	686b      	ldr	r3, [r5, #4]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d10a      	bne.n	8001002 <HAL_RCC_OscConfig+0x9a>
 8000fec:	686b      	ldr	r3, [r5, #4]
 8000fee:	03db      	lsls	r3, r3, #15
 8000ff0:	d507      	bpl.n	8001002 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff2:	682b      	ldr	r3, [r5, #0]
 8000ff4:	039b      	lsls	r3, r3, #14
 8000ff6:	d5bf      	bpl.n	8000f78 <HAL_RCC_OscConfig+0x10>
 8000ff8:	6863      	ldr	r3, [r4, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1bc      	bne.n	8000f78 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001002:	6863      	ldr	r3, [r4, #4]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d114      	bne.n	8001032 <HAL_RCC_OscConfig+0xca>
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	682a      	ldr	r2, [r5, #0]
 800100c:	025b      	lsls	r3, r3, #9
 800100e:	4313      	orrs	r3, r2
 8001010:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001012:	f7ff fe89 	bl	8000d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001018:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	02bf      	lsls	r7, r7, #10
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	423b      	tst	r3, r7
 8001020:	d1aa      	bne.n	8000f78 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001022:	f7ff fe81 	bl	8000d28 <HAL_GetTick>
 8001026:	1b80      	subs	r0, r0, r6
 8001028:	2864      	cmp	r0, #100	@ 0x64
 800102a:	d9f7      	bls.n	800101c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 800102c:	2003      	movs	r0, #3
}
 800102e:	b005      	add	sp, #20
 8001030:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001032:	2b00      	cmp	r3, #0
 8001034:	d116      	bne.n	8001064 <HAL_RCC_OscConfig+0xfc>
 8001036:	682b      	ldr	r3, [r5, #0]
 8001038:	4a8d      	ldr	r2, [pc, #564]	@ (8001270 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103c:	4013      	ands	r3, r2
 800103e:	602b      	str	r3, [r5, #0]
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	4a8c      	ldr	r2, [pc, #560]	@ (8001274 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001044:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001046:	4013      	ands	r3, r2
 8001048:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800104a:	f7ff fe6d 	bl	8000d28 <HAL_GetTick>
 800104e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	423b      	tst	r3, r7
 8001054:	d100      	bne.n	8001058 <HAL_RCC_OscConfig+0xf0>
 8001056:	e78f      	b.n	8000f78 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fe66 	bl	8000d28 <HAL_GetTick>
 800105c:	1b80      	subs	r0, r0, r6
 800105e:	2864      	cmp	r0, #100	@ 0x64
 8001060:	d9f6      	bls.n	8001050 <HAL_RCC_OscConfig+0xe8>
 8001062:	e7e3      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001064:	2b05      	cmp	r3, #5
 8001066:	d105      	bne.n	8001074 <HAL_RCC_OscConfig+0x10c>
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	682a      	ldr	r2, [r5, #0]
 800106c:	02db      	lsls	r3, r3, #11
 800106e:	4313      	orrs	r3, r2
 8001070:	602b      	str	r3, [r5, #0]
 8001072:	e7c9      	b.n	8001008 <HAL_RCC_OscConfig+0xa0>
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	4a7e      	ldr	r2, [pc, #504]	@ (8001270 <HAL_RCC_OscConfig+0x308>)
 8001078:	4013      	ands	r3, r2
 800107a:	602b      	str	r3, [r5, #0]
 800107c:	682b      	ldr	r3, [r5, #0]
 800107e:	4a7d      	ldr	r2, [pc, #500]	@ (8001274 <HAL_RCC_OscConfig+0x30c>)
 8001080:	4013      	ands	r3, r2
 8001082:	e7c5      	b.n	8001010 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001084:	220c      	movs	r2, #12
 8001086:	4d79      	ldr	r5, [pc, #484]	@ (800126c <HAL_RCC_OscConfig+0x304>)
 8001088:	686b      	ldr	r3, [r5, #4]
 800108a:	4213      	tst	r3, r2
 800108c:	d006      	beq.n	800109c <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800108e:	686b      	ldr	r3, [r5, #4]
 8001090:	4013      	ands	r3, r2
 8001092:	2b08      	cmp	r3, #8
 8001094:	d110      	bne.n	80010b8 <HAL_RCC_OscConfig+0x150>
 8001096:	686b      	ldr	r3, [r5, #4]
 8001098:	03db      	lsls	r3, r3, #15
 800109a:	d40d      	bmi.n	80010b8 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	079b      	lsls	r3, r3, #30
 80010a0:	d502      	bpl.n	80010a8 <HAL_RCC_OscConfig+0x140>
 80010a2:	68e3      	ldr	r3, [r4, #12]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d1aa      	bne.n	8000ffe <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a8:	21f8      	movs	r1, #248	@ 0xf8
 80010aa:	682a      	ldr	r2, [r5, #0]
 80010ac:	6923      	ldr	r3, [r4, #16]
 80010ae:	438a      	bics	r2, r1
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	602b      	str	r3, [r5, #0]
 80010b6:	e763      	b.n	8000f80 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b8:	68e2      	ldr	r2, [r4, #12]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d00f      	beq.n	80010e0 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 80010c0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c2:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80010c4:	4313      	orrs	r3, r2
 80010c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010c8:	f7ff fe2e 	bl	8000d28 <HAL_GetTick>
 80010cc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ce:	682b      	ldr	r3, [r5, #0]
 80010d0:	423b      	tst	r3, r7
 80010d2:	d1e9      	bne.n	80010a8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d4:	f7ff fe28 	bl	8000d28 <HAL_GetTick>
 80010d8:	1b80      	subs	r0, r0, r6
 80010da:	2802      	cmp	r0, #2
 80010dc:	d9f7      	bls.n	80010ce <HAL_RCC_OscConfig+0x166>
 80010de:	e7a5      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 80010e0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e2:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80010e4:	439a      	bics	r2, r3
 80010e6:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80010e8:	f7ff fe1e 	bl	8000d28 <HAL_GetTick>
 80010ec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	682b      	ldr	r3, [r5, #0]
 80010f0:	423b      	tst	r3, r7
 80010f2:	d100      	bne.n	80010f6 <HAL_RCC_OscConfig+0x18e>
 80010f4:	e744      	b.n	8000f80 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f6:	f7ff fe17 	bl	8000d28 <HAL_GetTick>
 80010fa:	1b80      	subs	r0, r0, r6
 80010fc:	2802      	cmp	r0, #2
 80010fe:	d9f6      	bls.n	80010ee <HAL_RCC_OscConfig+0x186>
 8001100:	e794      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001102:	69e2      	ldr	r2, [r4, #28]
 8001104:	2301      	movs	r3, #1
 8001106:	4d59      	ldr	r5, [pc, #356]	@ (800126c <HAL_RCC_OscConfig+0x304>)
 8001108:	2a00      	cmp	r2, #0
 800110a:	d010      	beq.n	800112e <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 800110c:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001110:	4313      	orrs	r3, r2
 8001112:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001114:	f7ff fe08 	bl	8000d28 <HAL_GetTick>
 8001118:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800111c:	423b      	tst	r3, r7
 800111e:	d000      	beq.n	8001122 <HAL_RCC_OscConfig+0x1ba>
 8001120:	e732      	b.n	8000f88 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001122:	f7ff fe01 	bl	8000d28 <HAL_GetTick>
 8001126:	1b80      	subs	r0, r0, r6
 8001128:	2802      	cmp	r0, #2
 800112a:	d9f6      	bls.n	800111a <HAL_RCC_OscConfig+0x1b2>
 800112c:	e77e      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 800112e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001132:	439a      	bics	r2, r3
 8001134:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001136:	f7ff fdf7 	bl	8000d28 <HAL_GetTick>
 800113a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800113e:	423b      	tst	r3, r7
 8001140:	d100      	bne.n	8001144 <HAL_RCC_OscConfig+0x1dc>
 8001142:	e721      	b.n	8000f88 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fdf0 	bl	8000d28 <HAL_GetTick>
 8001148:	1b80      	subs	r0, r0, r6
 800114a:	2802      	cmp	r0, #2
 800114c:	d9f6      	bls.n	800113c <HAL_RCC_OscConfig+0x1d4>
 800114e:	e76d      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001150:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001152:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001154:	4d45      	ldr	r5, [pc, #276]	@ (800126c <HAL_RCC_OscConfig+0x304>)
 8001156:	0552      	lsls	r2, r2, #21
 8001158:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800115a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115c:	4213      	tst	r3, r2
 800115e:	d108      	bne.n	8001172 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	69eb      	ldr	r3, [r5, #28]
 8001162:	4313      	orrs	r3, r2
 8001164:	61eb      	str	r3, [r5, #28]
 8001166:	69eb      	ldr	r3, [r5, #28]
 8001168:	4013      	ands	r3, r2
 800116a:	9303      	str	r3, [sp, #12]
 800116c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800116e:	2301      	movs	r3, #1
 8001170:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001172:	2780      	movs	r7, #128	@ 0x80
 8001174:	4e40      	ldr	r6, [pc, #256]	@ (8001278 <HAL_RCC_OscConfig+0x310>)
 8001176:	007f      	lsls	r7, r7, #1
 8001178:	6833      	ldr	r3, [r6, #0]
 800117a:	423b      	tst	r3, r7
 800117c:	d015      	beq.n	80011aa <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117e:	68a3      	ldr	r3, [r4, #8]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d122      	bne.n	80011ca <HAL_RCC_OscConfig+0x262>
 8001184:	6a2a      	ldr	r2, [r5, #32]
 8001186:	4313      	orrs	r3, r2
 8001188:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800118a:	f7ff fdcd 	bl	8000d28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001190:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001192:	6a2b      	ldr	r3, [r5, #32]
 8001194:	423b      	tst	r3, r7
 8001196:	d03f      	beq.n	8001218 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8001198:	9b00      	ldr	r3, [sp, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d000      	beq.n	80011a0 <HAL_RCC_OscConfig+0x238>
 800119e:	e6f7      	b.n	8000f90 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a0:	69eb      	ldr	r3, [r5, #28]
 80011a2:	4a36      	ldr	r2, [pc, #216]	@ (800127c <HAL_RCC_OscConfig+0x314>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	61eb      	str	r3, [r5, #28]
 80011a8:	e6f2      	b.n	8000f90 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011aa:	6833      	ldr	r3, [r6, #0]
 80011ac:	433b      	orrs	r3, r7
 80011ae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011b0:	f7ff fdba 	bl	8000d28 <HAL_GetTick>
 80011b4:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	6833      	ldr	r3, [r6, #0]
 80011b8:	423b      	tst	r3, r7
 80011ba:	d1e0      	bne.n	800117e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011bc:	f7ff fdb4 	bl	8000d28 <HAL_GetTick>
 80011c0:	9b01      	ldr	r3, [sp, #4]
 80011c2:	1ac0      	subs	r0, r0, r3
 80011c4:	2864      	cmp	r0, #100	@ 0x64
 80011c6:	d9f6      	bls.n	80011b6 <HAL_RCC_OscConfig+0x24e>
 80011c8:	e730      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d114      	bne.n	80011fa <HAL_RCC_OscConfig+0x292>
 80011d0:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d2:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d4:	4393      	bics	r3, r2
 80011d6:	622b      	str	r3, [r5, #32]
 80011d8:	6a2b      	ldr	r3, [r5, #32]
 80011da:	3203      	adds	r2, #3
 80011dc:	4393      	bics	r3, r2
 80011de:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80011e0:	f7ff fda2 	bl	8000d28 <HAL_GetTick>
 80011e4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e6:	6a2b      	ldr	r3, [r5, #32]
 80011e8:	423b      	tst	r3, r7
 80011ea:	d0d5      	beq.n	8001198 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ec:	f7ff fd9c 	bl	8000d28 <HAL_GetTick>
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <HAL_RCC_OscConfig+0x318>)
 80011f2:	1b80      	subs	r0, r0, r6
 80011f4:	4298      	cmp	r0, r3
 80011f6:	d9f6      	bls.n	80011e6 <HAL_RCC_OscConfig+0x27e>
 80011f8:	e718      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d105      	bne.n	800120a <HAL_RCC_OscConfig+0x2a2>
 80011fe:	6a29      	ldr	r1, [r5, #32]
 8001200:	3b01      	subs	r3, #1
 8001202:	430b      	orrs	r3, r1
 8001204:	622b      	str	r3, [r5, #32]
 8001206:	6a2b      	ldr	r3, [r5, #32]
 8001208:	e7bd      	b.n	8001186 <HAL_RCC_OscConfig+0x21e>
 800120a:	6a2b      	ldr	r3, [r5, #32]
 800120c:	4393      	bics	r3, r2
 800120e:	2204      	movs	r2, #4
 8001210:	622b      	str	r3, [r5, #32]
 8001212:	6a2b      	ldr	r3, [r5, #32]
 8001214:	4393      	bics	r3, r2
 8001216:	e7b7      	b.n	8001188 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff fd86 	bl	8000d28 <HAL_GetTick>
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_RCC_OscConfig+0x318>)
 800121e:	1b80      	subs	r0, r0, r6
 8001220:	4298      	cmp	r0, r3
 8001222:	d9b6      	bls.n	8001192 <HAL_RCC_OscConfig+0x22a>
 8001224:	e702      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001226:	f7ff fd7f 	bl	8000d28 <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	2802      	cmp	r0, #2
 800122e:	d800      	bhi.n	8001232 <HAL_RCC_OscConfig+0x2ca>
 8001230:	e6c1      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4e>
 8001232:	e6fb      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001234:	3205      	adds	r2, #5
 8001236:	d103      	bne.n	8001240 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001238:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800123a:	439a      	bics	r2, r3
 800123c:	636a      	str	r2, [r5, #52]	@ 0x34
 800123e:	e6be      	b.n	8000fbe <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001240:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001242:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001244:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001246:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001248:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 800124a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800124c:	4393      	bics	r3, r2
 800124e:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001250:	f7ff fd6a 	bl	8000d28 <HAL_GetTick>
 8001254:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001256:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001258:	423b      	tst	r3, r7
 800125a:	d100      	bne.n	800125e <HAL_RCC_OscConfig+0x2f6>
 800125c:	e6b6      	b.n	8000fcc <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800125e:	f7ff fd63 	bl	8000d28 <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	2802      	cmp	r0, #2
 8001266:	d9f6      	bls.n	8001256 <HAL_RCC_OscConfig+0x2ee>
 8001268:	e6e0      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	40021000 	.word	0x40021000
 8001270:	fffeffff 	.word	0xfffeffff
 8001274:	fffbffff 	.word	0xfffbffff
 8001278:	40007000 	.word	0x40007000
 800127c:	efffffff 	.word	0xefffffff
 8001280:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001284:	210c      	movs	r1, #12
 8001286:	4d34      	ldr	r5, [pc, #208]	@ (8001358 <HAL_RCC_OscConfig+0x3f0>)
 8001288:	686a      	ldr	r2, [r5, #4]
 800128a:	400a      	ands	r2, r1
 800128c:	2a08      	cmp	r2, #8
 800128e:	d047      	beq.n	8001320 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001290:	4a32      	ldr	r2, [pc, #200]	@ (800135c <HAL_RCC_OscConfig+0x3f4>)
 8001292:	2b02      	cmp	r3, #2
 8001294:	d132      	bne.n	80012fc <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8001296:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001298:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800129a:	4013      	ands	r3, r2
 800129c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800129e:	f7ff fd43 	bl	8000d28 <HAL_GetTick>
 80012a2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a4:	04bf      	lsls	r7, r7, #18
 80012a6:	682b      	ldr	r3, [r5, #0]
 80012a8:	423b      	tst	r3, r7
 80012aa:	d121      	bne.n	80012f0 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ac:	220f      	movs	r2, #15
 80012ae:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b0:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b2:	4393      	bics	r3, r2
 80012b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b8:	4313      	orrs	r3, r2
 80012ba:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80012bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80012be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012c0:	686a      	ldr	r2, [r5, #4]
 80012c2:	430b      	orrs	r3, r1
 80012c4:	4926      	ldr	r1, [pc, #152]	@ (8001360 <HAL_RCC_OscConfig+0x3f8>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	4313      	orrs	r3, r2
 80012ca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012cc:	2380      	movs	r3, #128	@ 0x80
 80012ce:	682a      	ldr	r2, [r5, #0]
 80012d0:	045b      	lsls	r3, r3, #17
 80012d2:	4313      	orrs	r3, r2
 80012d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012d6:	f7ff fd27 	bl	8000d28 <HAL_GetTick>
 80012da:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	4233      	tst	r3, r6
 80012e0:	d000      	beq.n	80012e4 <HAL_RCC_OscConfig+0x37c>
 80012e2:	e677      	b.n	8000fd4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff fd20 	bl	8000d28 <HAL_GetTick>
 80012e8:	1b00      	subs	r0, r0, r4
 80012ea:	2802      	cmp	r0, #2
 80012ec:	d9f6      	bls.n	80012dc <HAL_RCC_OscConfig+0x374>
 80012ee:	e69d      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fd1a 	bl	8000d28 <HAL_GetTick>
 80012f4:	1b80      	subs	r0, r0, r6
 80012f6:	2802      	cmp	r0, #2
 80012f8:	d9d5      	bls.n	80012a6 <HAL_RCC_OscConfig+0x33e>
 80012fa:	e697      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 80012fc:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fe:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001300:	4013      	ands	r3, r2
 8001302:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001304:	f7ff fd10 	bl	8000d28 <HAL_GetTick>
 8001308:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130a:	04b6      	lsls	r6, r6, #18
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	4233      	tst	r3, r6
 8001310:	d100      	bne.n	8001314 <HAL_RCC_OscConfig+0x3ac>
 8001312:	e65f      	b.n	8000fd4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff fd08 	bl	8000d28 <HAL_GetTick>
 8001318:	1b00      	subs	r0, r0, r4
 800131a:	2802      	cmp	r0, #2
 800131c:	d9f6      	bls.n	800130c <HAL_RCC_OscConfig+0x3a4>
 800131e:	e685      	b.n	800102c <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001320:	2b01      	cmp	r3, #1
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x3be>
 8001324:	e66b      	b.n	8000ffe <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001326:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8001328:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800132a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800132c:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 800132e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001330:	4002      	ands	r2, r0
 8001332:	428a      	cmp	r2, r1
 8001334:	d000      	beq.n	8001338 <HAL_RCC_OscConfig+0x3d0>
 8001336:	e662      	b.n	8000ffe <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001338:	220f      	movs	r2, #15
 800133a:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800133c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800133e:	4293      	cmp	r3, r2
 8001340:	d000      	beq.n	8001344 <HAL_RCC_OscConfig+0x3dc>
 8001342:	e65c      	b.n	8000ffe <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001344:	23f0      	movs	r3, #240	@ 0xf0
 8001346:	039b      	lsls	r3, r3, #14
 8001348:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800134a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800134c:	1ac0      	subs	r0, r0, r3
 800134e:	1e43      	subs	r3, r0, #1
 8001350:	4198      	sbcs	r0, r3
 8001352:	b2c0      	uxtb	r0, r0
 8001354:	e66b      	b.n	800102e <HAL_RCC_OscConfig+0xc6>
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	40021000 	.word	0x40021000
 800135c:	feffffff 	.word	0xfeffffff
 8001360:	ffc2ffff 	.word	0xffc2ffff

08001364 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001364:	220c      	movs	r2, #12
{
 8001366:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001368:	4d0c      	ldr	r5, [pc, #48]	@ (800139c <HAL_RCC_GetSysClockFreq+0x38>)
 800136a:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800136c:	401a      	ands	r2, r3
 800136e:	2a08      	cmp	r2, #8
 8001370:	d111      	bne.n	8001396 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001372:	200f      	movs	r0, #15
 8001374:	490a      	ldr	r1, [pc, #40]	@ (80013a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001376:	0c9a      	lsrs	r2, r3, #18
 8001378:	4002      	ands	r2, r0
 800137a:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800137c:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800137e:	03db      	lsls	r3, r3, #15
 8001380:	d507      	bpl.n	8001392 <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001382:	4908      	ldr	r1, [pc, #32]	@ (80013a4 <HAL_RCC_GetSysClockFreq+0x40>)
 8001384:	4002      	ands	r2, r0
 8001386:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001388:	4807      	ldr	r0, [pc, #28]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x44>)
 800138a:	f7fe fecf 	bl	800012c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800138e:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001390:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <HAL_RCC_GetSysClockFreq+0x48>)
 8001394:	e7fb      	b.n	800138e <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8001396:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8001398:	e7fa      	b.n	8001390 <HAL_RCC_GetSysClockFreq+0x2c>
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	40021000 	.word	0x40021000
 80013a0:	08001590 	.word	0x08001590
 80013a4:	08001580 	.word	0x08001580
 80013a8:	007a1200 	.word	0x007a1200
 80013ac:	003d0900 	.word	0x003d0900

080013b0 <HAL_RCC_ClockConfig>:
{
 80013b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013b2:	0004      	movs	r4, r0
 80013b4:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
}
 80013bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013be:	2201      	movs	r2, #1
 80013c0:	4d37      	ldr	r5, [pc, #220]	@ (80014a0 <HAL_RCC_ClockConfig+0xf0>)
 80013c2:	682b      	ldr	r3, [r5, #0]
 80013c4:	4013      	ands	r3, r2
 80013c6:	428b      	cmp	r3, r1
 80013c8:	d31c      	bcc.n	8001404 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	0793      	lsls	r3, r2, #30
 80013ce:	d422      	bmi.n	8001416 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d0:	07d2      	lsls	r2, r2, #31
 80013d2:	d42f      	bmi.n	8001434 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013d4:	2301      	movs	r3, #1
 80013d6:	682a      	ldr	r2, [r5, #0]
 80013d8:	401a      	ands	r2, r3
 80013da:	42b2      	cmp	r2, r6
 80013dc:	d851      	bhi.n	8001482 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	4d30      	ldr	r5, [pc, #192]	@ (80014a4 <HAL_RCC_ClockConfig+0xf4>)
 80013e2:	075b      	lsls	r3, r3, #29
 80013e4:	d454      	bmi.n	8001490 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013e6:	f7ff ffbd 	bl	8001364 <HAL_RCC_GetSysClockFreq>
 80013ea:	686b      	ldr	r3, [r5, #4]
 80013ec:	4a2e      	ldr	r2, [pc, #184]	@ (80014a8 <HAL_RCC_ClockConfig+0xf8>)
 80013ee:	061b      	lsls	r3, r3, #24
 80013f0:	0f1b      	lsrs	r3, r3, #28
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	492d      	ldr	r1, [pc, #180]	@ (80014ac <HAL_RCC_ClockConfig+0xfc>)
 80013f6:	40d8      	lsrs	r0, r3
 80013f8:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013fa:	2003      	movs	r0, #3
 80013fc:	f7ff fc54 	bl	8000ca8 <HAL_InitTick>
  return HAL_OK;
 8001400:	2000      	movs	r0, #0
 8001402:	e7db      	b.n	80013bc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	4393      	bics	r3, r2
 8001408:	430b      	orrs	r3, r1
 800140a:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	4013      	ands	r3, r2
 8001410:	428b      	cmp	r3, r1
 8001412:	d1d2      	bne.n	80013ba <HAL_RCC_ClockConfig+0xa>
 8001414:	e7d9      	b.n	80013ca <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001416:	4923      	ldr	r1, [pc, #140]	@ (80014a4 <HAL_RCC_ClockConfig+0xf4>)
 8001418:	0753      	lsls	r3, r2, #29
 800141a:	d504      	bpl.n	8001426 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800141c:	23e0      	movs	r3, #224	@ 0xe0
 800141e:	6848      	ldr	r0, [r1, #4]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4303      	orrs	r3, r0
 8001424:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001426:	20f0      	movs	r0, #240	@ 0xf0
 8001428:	684b      	ldr	r3, [r1, #4]
 800142a:	4383      	bics	r3, r0
 800142c:	68a0      	ldr	r0, [r4, #8]
 800142e:	4303      	orrs	r3, r0
 8001430:	604b      	str	r3, [r1, #4]
 8001432:	e7cd      	b.n	80013d0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001434:	4f1b      	ldr	r7, [pc, #108]	@ (80014a4 <HAL_RCC_ClockConfig+0xf4>)
 8001436:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001438:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	2a01      	cmp	r2, #1
 800143c:	d119      	bne.n	8001472 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	039b      	lsls	r3, r3, #14
 8001440:	d5bb      	bpl.n	80013ba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001442:	2103      	movs	r1, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	438b      	bics	r3, r1
 8001448:	4313      	orrs	r3, r2
 800144a:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 800144c:	f7ff fc6c 	bl	8000d28 <HAL_GetTick>
 8001450:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001452:	230c      	movs	r3, #12
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	401a      	ands	r2, r3
 8001458:	6863      	ldr	r3, [r4, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d0b9      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001460:	f7ff fc62 	bl	8000d28 <HAL_GetTick>
 8001464:	9b01      	ldr	r3, [sp, #4]
 8001466:	1ac0      	subs	r0, r0, r3
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_RCC_ClockConfig+0x100>)
 800146a:	4298      	cmp	r0, r3
 800146c:	d9f1      	bls.n	8001452 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800146e:	2003      	movs	r0, #3
 8001470:	e7a4      	b.n	80013bc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001472:	2a02      	cmp	r2, #2
 8001474:	d102      	bne.n	800147c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	019b      	lsls	r3, r3, #6
 8001478:	d4e3      	bmi.n	8001442 <HAL_RCC_ClockConfig+0x92>
 800147a:	e79e      	b.n	80013ba <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	079b      	lsls	r3, r3, #30
 800147e:	d4e0      	bmi.n	8001442 <HAL_RCC_ClockConfig+0x92>
 8001480:	e79b      	b.n	80013ba <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	682a      	ldr	r2, [r5, #0]
 8001484:	439a      	bics	r2, r3
 8001486:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001488:	682a      	ldr	r2, [r5, #0]
 800148a:	421a      	tst	r2, r3
 800148c:	d0a7      	beq.n	80013de <HAL_RCC_ClockConfig+0x2e>
 800148e:	e794      	b.n	80013ba <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001490:	686b      	ldr	r3, [r5, #4]
 8001492:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <HAL_RCC_ClockConfig+0x104>)
 8001494:	4013      	ands	r3, r2
 8001496:	68e2      	ldr	r2, [r4, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	606b      	str	r3, [r5, #4]
 800149c:	e7a3      	b.n	80013e6 <HAL_RCC_ClockConfig+0x36>
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08001570 	.word	0x08001570
 80014ac:	20000000 	.word	0x20000000
 80014b0:	00001388 	.word	0x00001388
 80014b4:	fffff8ff 	.word	0xfffff8ff

080014b8 <memset>:
 80014b8:	0003      	movs	r3, r0
 80014ba:	1882      	adds	r2, r0, r2
 80014bc:	4293      	cmp	r3, r2
 80014be:	d100      	bne.n	80014c2 <memset+0xa>
 80014c0:	4770      	bx	lr
 80014c2:	7019      	strb	r1, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	e7f9      	b.n	80014bc <memset+0x4>

080014c8 <__libc_init_array>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	2600      	movs	r6, #0
 80014cc:	4c0c      	ldr	r4, [pc, #48]	@ (8001500 <__libc_init_array+0x38>)
 80014ce:	4d0d      	ldr	r5, [pc, #52]	@ (8001504 <__libc_init_array+0x3c>)
 80014d0:	1b64      	subs	r4, r4, r5
 80014d2:	10a4      	asrs	r4, r4, #2
 80014d4:	42a6      	cmp	r6, r4
 80014d6:	d109      	bne.n	80014ec <__libc_init_array+0x24>
 80014d8:	2600      	movs	r6, #0
 80014da:	f000 f823 	bl	8001524 <_init>
 80014de:	4c0a      	ldr	r4, [pc, #40]	@ (8001508 <__libc_init_array+0x40>)
 80014e0:	4d0a      	ldr	r5, [pc, #40]	@ (800150c <__libc_init_array+0x44>)
 80014e2:	1b64      	subs	r4, r4, r5
 80014e4:	10a4      	asrs	r4, r4, #2
 80014e6:	42a6      	cmp	r6, r4
 80014e8:	d105      	bne.n	80014f6 <__libc_init_array+0x2e>
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	00b3      	lsls	r3, r6, #2
 80014ee:	58eb      	ldr	r3, [r5, r3]
 80014f0:	4798      	blx	r3
 80014f2:	3601      	adds	r6, #1
 80014f4:	e7ee      	b.n	80014d4 <__libc_init_array+0xc>
 80014f6:	00b3      	lsls	r3, r6, #2
 80014f8:	58eb      	ldr	r3, [r5, r3]
 80014fa:	4798      	blx	r3
 80014fc:	3601      	adds	r6, #1
 80014fe:	e7f2      	b.n	80014e6 <__libc_init_array+0x1e>
 8001500:	080015a8 	.word	0x080015a8
 8001504:	080015a8 	.word	0x080015a8
 8001508:	080015ac 	.word	0x080015ac
 800150c:	080015a8 	.word	0x080015a8

08001510 <memcpy>:
 8001510:	2300      	movs	r3, #0
 8001512:	b510      	push	{r4, lr}
 8001514:	429a      	cmp	r2, r3
 8001516:	d100      	bne.n	800151a <memcpy+0xa>
 8001518:	bd10      	pop	{r4, pc}
 800151a:	5ccc      	ldrb	r4, [r1, r3]
 800151c:	54c4      	strb	r4, [r0, r3]
 800151e:	3301      	adds	r3, #1
 8001520:	e7f8      	b.n	8001514 <memcpy+0x4>
	...

08001524 <_init>:
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152a:	bc08      	pop	{r3}
 800152c:	469e      	mov	lr, r3
 800152e:	4770      	bx	lr

08001530 <_fini>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001536:	bc08      	pop	{r3}
 8001538:	469e      	mov	lr, r3
 800153a:	4770      	bx	lr
