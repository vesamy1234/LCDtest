
LCDtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000161c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080016dc  080016dc  000026dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001740  08001740  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001740  08001740  00002740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001748  08001748  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001748  08001748  00002748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800174c  0800174c  0000274c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001750  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000010  0800175c  00003010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800175c  000030a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d29  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013ac  00000000  00000000  00006d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00001045  00000000  00000000  00008109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000388  00000000  00000000  00009150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003b2  00000000  00000000  000094d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000edf9  00000000  00000000  0000988a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006467  00000000  00000000  00018683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00057253  00000000  00000000  0001eaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00075d3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008d4  00000000  00000000  00075d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00076654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080016c4 	.word	0x080016c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080016c4 	.word	0x080016c4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_ldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d115      	bne.n	8000274 <__aeabi_ldivmod+0x30>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d113      	bne.n	8000274 <__aeabi_ldivmod+0x30>
 800024c:	2900      	cmp	r1, #0
 800024e:	db06      	blt.n	800025e <__aeabi_ldivmod+0x1a>
 8000250:	dc01      	bgt.n	8000256 <__aeabi_ldivmod+0x12>
 8000252:	2800      	cmp	r0, #0
 8000254:	d006      	beq.n	8000264 <__aeabi_ldivmod+0x20>
 8000256:	2000      	movs	r0, #0
 8000258:	43c0      	mvns	r0, r0
 800025a:	0841      	lsrs	r1, r0, #1
 800025c:	e002      	b.n	8000264 <__aeabi_ldivmod+0x20>
 800025e:	2180      	movs	r1, #128	@ 0x80
 8000260:	0609      	lsls	r1, r1, #24
 8000262:	2000      	movs	r0, #0
 8000264:	b407      	push	{r0, r1, r2}
 8000266:	4802      	ldr	r0, [pc, #8]	@ (8000270 <__aeabi_ldivmod+0x2c>)
 8000268:	a101      	add	r1, pc, #4	@ (adr r1, 8000270 <__aeabi_ldivmod+0x2c>)
 800026a:	1840      	adds	r0, r0, r1
 800026c:	9002      	str	r0, [sp, #8]
 800026e:	bd03      	pop	{r0, r1, pc}
 8000270:	ffffffd1 	.word	0xffffffd1
 8000274:	b403      	push	{r0, r1}
 8000276:	4668      	mov	r0, sp
 8000278:	b501      	push	{r0, lr}
 800027a:	9802      	ldr	r0, [sp, #8]
 800027c:	f000 f920 	bl	80004c0 <__gnu_ldivmod_helper>
 8000280:	9b01      	ldr	r3, [sp, #4]
 8000282:	469e      	mov	lr, r3
 8000284:	b002      	add	sp, #8
 8000286:	bc0c      	pop	{r2, r3}
 8000288:	4770      	bx	lr
 800028a:	46c0      	nop			@ (mov r8, r8)

0800028c <__aeabi_uldivmod>:
 800028c:	2b00      	cmp	r3, #0
 800028e:	d111      	bne.n	80002b4 <__aeabi_uldivmod+0x28>
 8000290:	2a00      	cmp	r2, #0
 8000292:	d10f      	bne.n	80002b4 <__aeabi_uldivmod+0x28>
 8000294:	2900      	cmp	r1, #0
 8000296:	d100      	bne.n	800029a <__aeabi_uldivmod+0xe>
 8000298:	2800      	cmp	r0, #0
 800029a:	d002      	beq.n	80002a2 <__aeabi_uldivmod+0x16>
 800029c:	2100      	movs	r1, #0
 800029e:	43c9      	mvns	r1, r1
 80002a0:	0008      	movs	r0, r1
 80002a2:	b407      	push	{r0, r1, r2}
 80002a4:	4802      	ldr	r0, [pc, #8]	@ (80002b0 <__aeabi_uldivmod+0x24>)
 80002a6:	a102      	add	r1, pc, #8	@ (adr r1, 80002b0 <__aeabi_uldivmod+0x24>)
 80002a8:	1840      	adds	r0, r0, r1
 80002aa:	9002      	str	r0, [sp, #8]
 80002ac:	bd03      	pop	{r0, r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)
 80002b0:	ffffff91 	.word	0xffffff91
 80002b4:	b403      	push	{r0, r1}
 80002b6:	4668      	mov	r0, sp
 80002b8:	b501      	push	{r0, lr}
 80002ba:	9802      	ldr	r0, [sp, #8]
 80002bc:	f000 f834 	bl	8000328 <__udivmoddi4>
 80002c0:	9b01      	ldr	r3, [sp, #4]
 80002c2:	469e      	mov	lr, r3
 80002c4:	b002      	add	sp, #8
 80002c6:	bc0c      	pop	{r2, r3}
 80002c8:	4770      	bx	lr
 80002ca:	46c0      	nop			@ (mov r8, r8)

080002cc <__aeabi_lmul>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	46ce      	mov	lr, r9
 80002d0:	4699      	mov	r9, r3
 80002d2:	0c03      	lsrs	r3, r0, #16
 80002d4:	469c      	mov	ip, r3
 80002d6:	0413      	lsls	r3, r2, #16
 80002d8:	4647      	mov	r7, r8
 80002da:	0c1b      	lsrs	r3, r3, #16
 80002dc:	001d      	movs	r5, r3
 80002de:	000e      	movs	r6, r1
 80002e0:	4661      	mov	r1, ip
 80002e2:	0404      	lsls	r4, r0, #16
 80002e4:	0c24      	lsrs	r4, r4, #16
 80002e6:	b580      	push	{r7, lr}
 80002e8:	0007      	movs	r7, r0
 80002ea:	0c10      	lsrs	r0, r2, #16
 80002ec:	434b      	muls	r3, r1
 80002ee:	4365      	muls	r5, r4
 80002f0:	4341      	muls	r1, r0
 80002f2:	4360      	muls	r0, r4
 80002f4:	0c2c      	lsrs	r4, r5, #16
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	1824      	adds	r4, r4, r0
 80002fa:	468c      	mov	ip, r1
 80002fc:	42a3      	cmp	r3, r4
 80002fe:	d903      	bls.n	8000308 <__aeabi_lmul+0x3c>
 8000300:	2380      	movs	r3, #128	@ 0x80
 8000302:	025b      	lsls	r3, r3, #9
 8000304:	4698      	mov	r8, r3
 8000306:	44c4      	add	ip, r8
 8000308:	4649      	mov	r1, r9
 800030a:	4379      	muls	r1, r7
 800030c:	4356      	muls	r6, r2
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	042d      	lsls	r5, r5, #16
 8000312:	0c2d      	lsrs	r5, r5, #16
 8000314:	1989      	adds	r1, r1, r6
 8000316:	4463      	add	r3, ip
 8000318:	0424      	lsls	r4, r4, #16
 800031a:	1960      	adds	r0, r4, r5
 800031c:	18c9      	adds	r1, r1, r3
 800031e:	bcc0      	pop	{r6, r7}
 8000320:	46b9      	mov	r9, r7
 8000322:	46b0      	mov	r8, r6
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	46c0      	nop			@ (mov r8, r8)

08000328 <__udivmoddi4>:
 8000328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800032a:	4657      	mov	r7, sl
 800032c:	464e      	mov	r6, r9
 800032e:	4645      	mov	r5, r8
 8000330:	46de      	mov	lr, fp
 8000332:	b5e0      	push	{r5, r6, r7, lr}
 8000334:	0004      	movs	r4, r0
 8000336:	000d      	movs	r5, r1
 8000338:	4692      	mov	sl, r2
 800033a:	4699      	mov	r9, r3
 800033c:	b083      	sub	sp, #12
 800033e:	428b      	cmp	r3, r1
 8000340:	d830      	bhi.n	80003a4 <__udivmoddi4+0x7c>
 8000342:	d02d      	beq.n	80003a0 <__udivmoddi4+0x78>
 8000344:	4649      	mov	r1, r9
 8000346:	4650      	mov	r0, sl
 8000348:	f000 f8d8 	bl	80004fc <__clzdi2>
 800034c:	0029      	movs	r1, r5
 800034e:	0006      	movs	r6, r0
 8000350:	0020      	movs	r0, r4
 8000352:	f000 f8d3 	bl	80004fc <__clzdi2>
 8000356:	1a33      	subs	r3, r6, r0
 8000358:	4698      	mov	r8, r3
 800035a:	3b20      	subs	r3, #32
 800035c:	d434      	bmi.n	80003c8 <__udivmoddi4+0xa0>
 800035e:	469b      	mov	fp, r3
 8000360:	4653      	mov	r3, sl
 8000362:	465a      	mov	r2, fp
 8000364:	4093      	lsls	r3, r2
 8000366:	4642      	mov	r2, r8
 8000368:	001f      	movs	r7, r3
 800036a:	4653      	mov	r3, sl
 800036c:	4093      	lsls	r3, r2
 800036e:	001e      	movs	r6, r3
 8000370:	42af      	cmp	r7, r5
 8000372:	d83b      	bhi.n	80003ec <__udivmoddi4+0xc4>
 8000374:	42af      	cmp	r7, r5
 8000376:	d100      	bne.n	800037a <__udivmoddi4+0x52>
 8000378:	e079      	b.n	800046e <__udivmoddi4+0x146>
 800037a:	465b      	mov	r3, fp
 800037c:	1ba4      	subs	r4, r4, r6
 800037e:	41bd      	sbcs	r5, r7
 8000380:	2b00      	cmp	r3, #0
 8000382:	da00      	bge.n	8000386 <__udivmoddi4+0x5e>
 8000384:	e076      	b.n	8000474 <__udivmoddi4+0x14c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	2301      	movs	r3, #1
 8000390:	465a      	mov	r2, fp
 8000392:	4093      	lsls	r3, r2
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2301      	movs	r3, #1
 8000398:	4642      	mov	r2, r8
 800039a:	4093      	lsls	r3, r2
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	e029      	b.n	80003f4 <__udivmoddi4+0xcc>
 80003a0:	4282      	cmp	r2, r0
 80003a2:	d9cf      	bls.n	8000344 <__udivmoddi4+0x1c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <__udivmoddi4+0x8e>
 80003b2:	601c      	str	r4, [r3, #0]
 80003b4:	605d      	str	r5, [r3, #4]
 80003b6:	9800      	ldr	r0, [sp, #0]
 80003b8:	9901      	ldr	r1, [sp, #4]
 80003ba:	b003      	add	sp, #12
 80003bc:	bcf0      	pop	{r4, r5, r6, r7}
 80003be:	46bb      	mov	fp, r7
 80003c0:	46b2      	mov	sl, r6
 80003c2:	46a9      	mov	r9, r5
 80003c4:	46a0      	mov	r8, r4
 80003c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c8:	4642      	mov	r2, r8
 80003ca:	469b      	mov	fp, r3
 80003cc:	2320      	movs	r3, #32
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	4652      	mov	r2, sl
 80003d2:	40da      	lsrs	r2, r3
 80003d4:	4641      	mov	r1, r8
 80003d6:	0013      	movs	r3, r2
 80003d8:	464a      	mov	r2, r9
 80003da:	408a      	lsls	r2, r1
 80003dc:	0017      	movs	r7, r2
 80003de:	4642      	mov	r2, r8
 80003e0:	431f      	orrs	r7, r3
 80003e2:	4653      	mov	r3, sl
 80003e4:	4093      	lsls	r3, r2
 80003e6:	001e      	movs	r6, r3
 80003e8:	42af      	cmp	r7, r5
 80003ea:	d9c3      	bls.n	8000374 <__udivmoddi4+0x4c>
 80003ec:	2200      	movs	r2, #0
 80003ee:	2300      	movs	r3, #0
 80003f0:	9200      	str	r2, [sp, #0]
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	4643      	mov	r3, r8
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0d8      	beq.n	80003ac <__udivmoddi4+0x84>
 80003fa:	07fb      	lsls	r3, r7, #31
 80003fc:	0872      	lsrs	r2, r6, #1
 80003fe:	431a      	orrs	r2, r3
 8000400:	4646      	mov	r6, r8
 8000402:	087b      	lsrs	r3, r7, #1
 8000404:	e00e      	b.n	8000424 <__udivmoddi4+0xfc>
 8000406:	42ab      	cmp	r3, r5
 8000408:	d101      	bne.n	800040e <__udivmoddi4+0xe6>
 800040a:	42a2      	cmp	r2, r4
 800040c:	d80c      	bhi.n	8000428 <__udivmoddi4+0x100>
 800040e:	1aa4      	subs	r4, r4, r2
 8000410:	419d      	sbcs	r5, r3
 8000412:	2001      	movs	r0, #1
 8000414:	1924      	adds	r4, r4, r4
 8000416:	416d      	adcs	r5, r5
 8000418:	2100      	movs	r1, #0
 800041a:	3e01      	subs	r6, #1
 800041c:	1824      	adds	r4, r4, r0
 800041e:	414d      	adcs	r5, r1
 8000420:	2e00      	cmp	r6, #0
 8000422:	d006      	beq.n	8000432 <__udivmoddi4+0x10a>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d9ee      	bls.n	8000406 <__udivmoddi4+0xde>
 8000428:	3e01      	subs	r6, #1
 800042a:	1924      	adds	r4, r4, r4
 800042c:	416d      	adcs	r5, r5
 800042e:	2e00      	cmp	r6, #0
 8000430:	d1f8      	bne.n	8000424 <__udivmoddi4+0xfc>
 8000432:	9800      	ldr	r0, [sp, #0]
 8000434:	9901      	ldr	r1, [sp, #4]
 8000436:	465b      	mov	r3, fp
 8000438:	1900      	adds	r0, r0, r4
 800043a:	4169      	adcs	r1, r5
 800043c:	2b00      	cmp	r3, #0
 800043e:	db24      	blt.n	800048a <__udivmoddi4+0x162>
 8000440:	002b      	movs	r3, r5
 8000442:	465a      	mov	r2, fp
 8000444:	4644      	mov	r4, r8
 8000446:	40d3      	lsrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	db2a      	blt.n	80004ac <__udivmoddi4+0x184>
 8000456:	0026      	movs	r6, r4
 8000458:	409e      	lsls	r6, r3
 800045a:	0033      	movs	r3, r6
 800045c:	0026      	movs	r6, r4
 800045e:	4647      	mov	r7, r8
 8000460:	40be      	lsls	r6, r7
 8000462:	0032      	movs	r2, r6
 8000464:	1a80      	subs	r0, r0, r2
 8000466:	4199      	sbcs	r1, r3
 8000468:	9000      	str	r0, [sp, #0]
 800046a:	9101      	str	r1, [sp, #4]
 800046c:	e79e      	b.n	80003ac <__udivmoddi4+0x84>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d8bc      	bhi.n	80003ec <__udivmoddi4+0xc4>
 8000472:	e782      	b.n	800037a <__udivmoddi4+0x52>
 8000474:	4642      	mov	r2, r8
 8000476:	2320      	movs	r3, #32
 8000478:	2100      	movs	r1, #0
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	2200      	movs	r2, #0
 800047e:	9100      	str	r1, [sp, #0]
 8000480:	9201      	str	r2, [sp, #4]
 8000482:	2201      	movs	r2, #1
 8000484:	40da      	lsrs	r2, r3
 8000486:	9201      	str	r2, [sp, #4]
 8000488:	e785      	b.n	8000396 <__udivmoddi4+0x6e>
 800048a:	4642      	mov	r2, r8
 800048c:	2320      	movs	r3, #32
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	002a      	movs	r2, r5
 8000492:	4646      	mov	r6, r8
 8000494:	409a      	lsls	r2, r3
 8000496:	0023      	movs	r3, r4
 8000498:	40f3      	lsrs	r3, r6
 800049a:	4644      	mov	r4, r8
 800049c:	4313      	orrs	r3, r2
 800049e:	002a      	movs	r2, r5
 80004a0:	40e2      	lsrs	r2, r4
 80004a2:	001c      	movs	r4, r3
 80004a4:	465b      	mov	r3, fp
 80004a6:	0015      	movs	r5, r2
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dad4      	bge.n	8000456 <__udivmoddi4+0x12e>
 80004ac:	4642      	mov	r2, r8
 80004ae:	002f      	movs	r7, r5
 80004b0:	2320      	movs	r3, #32
 80004b2:	0026      	movs	r6, r4
 80004b4:	4097      	lsls	r7, r2
 80004b6:	1a9b      	subs	r3, r3, r2
 80004b8:	40de      	lsrs	r6, r3
 80004ba:	003b      	movs	r3, r7
 80004bc:	4333      	orrs	r3, r6
 80004be:	e7cd      	b.n	800045c <__udivmoddi4+0x134>

080004c0 <__gnu_ldivmod_helper>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	46ce      	mov	lr, r9
 80004c4:	4647      	mov	r7, r8
 80004c6:	b580      	push	{r7, lr}
 80004c8:	4691      	mov	r9, r2
 80004ca:	4698      	mov	r8, r3
 80004cc:	0004      	movs	r4, r0
 80004ce:	000d      	movs	r5, r1
 80004d0:	f000 f820 	bl	8000514 <__divdi3>
 80004d4:	0007      	movs	r7, r0
 80004d6:	000e      	movs	r6, r1
 80004d8:	0002      	movs	r2, r0
 80004da:	000b      	movs	r3, r1
 80004dc:	4648      	mov	r0, r9
 80004de:	4641      	mov	r1, r8
 80004e0:	f7ff fef4 	bl	80002cc <__aeabi_lmul>
 80004e4:	1a24      	subs	r4, r4, r0
 80004e6:	418d      	sbcs	r5, r1
 80004e8:	9b08      	ldr	r3, [sp, #32]
 80004ea:	0038      	movs	r0, r7
 80004ec:	0031      	movs	r1, r6
 80004ee:	601c      	str	r4, [r3, #0]
 80004f0:	605d      	str	r5, [r3, #4]
 80004f2:	bcc0      	pop	{r6, r7}
 80004f4:	46b9      	mov	r9, r7
 80004f6:	46b0      	mov	r8, r6
 80004f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004fa:	46c0      	nop			@ (mov r8, r8)

080004fc <__clzdi2>:
 80004fc:	b510      	push	{r4, lr}
 80004fe:	2900      	cmp	r1, #0
 8000500:	d103      	bne.n	800050a <__clzdi2+0xe>
 8000502:	f000 f8f9 	bl	80006f8 <__clzsi2>
 8000506:	3020      	adds	r0, #32
 8000508:	e002      	b.n	8000510 <__clzdi2+0x14>
 800050a:	0008      	movs	r0, r1
 800050c:	f000 f8f4 	bl	80006f8 <__clzsi2>
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__divdi3>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	46d6      	mov	lr, sl
 8000518:	464f      	mov	r7, r9
 800051a:	4646      	mov	r6, r8
 800051c:	b5c0      	push	{r6, r7, lr}
 800051e:	0004      	movs	r4, r0
 8000520:	000d      	movs	r5, r1
 8000522:	0010      	movs	r0, r2
 8000524:	0019      	movs	r1, r3
 8000526:	b082      	sub	sp, #8
 8000528:	2d00      	cmp	r5, #0
 800052a:	da00      	bge.n	800052e <__divdi3+0x1a>
 800052c:	e087      	b.n	800063e <__divdi3+0x12a>
 800052e:	2b00      	cmp	r3, #0
 8000530:	db0b      	blt.n	800054a <__divdi3+0x36>
 8000532:	0016      	movs	r6, r2
 8000534:	001f      	movs	r7, r3
 8000536:	42ab      	cmp	r3, r5
 8000538:	d919      	bls.n	800056e <__divdi3+0x5a>
 800053a:	2000      	movs	r0, #0
 800053c:	2100      	movs	r1, #0
 800053e:	b002      	add	sp, #8
 8000540:	bce0      	pop	{r5, r6, r7}
 8000542:	46ba      	mov	sl, r7
 8000544:	46b1      	mov	r9, r6
 8000546:	46a8      	mov	r8, r5
 8000548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054a:	2700      	movs	r7, #0
 800054c:	4246      	negs	r6, r0
 800054e:	418f      	sbcs	r7, r1
 8000550:	42af      	cmp	r7, r5
 8000552:	d804      	bhi.n	800055e <__divdi3+0x4a>
 8000554:	d000      	beq.n	8000558 <__divdi3+0x44>
 8000556:	e082      	b.n	800065e <__divdi3+0x14a>
 8000558:	42a6      	cmp	r6, r4
 800055a:	d800      	bhi.n	800055e <__divdi3+0x4a>
 800055c:	e07f      	b.n	800065e <__divdi3+0x14a>
 800055e:	2000      	movs	r0, #0
 8000560:	2100      	movs	r1, #0
 8000562:	e08f      	b.n	8000684 <__divdi3+0x170>
 8000564:	2700      	movs	r7, #0
 8000566:	4246      	negs	r6, r0
 8000568:	418f      	sbcs	r7, r1
 800056a:	429f      	cmp	r7, r3
 800056c:	d8e5      	bhi.n	800053a <__divdi3+0x26>
 800056e:	42af      	cmp	r7, r5
 8000570:	d100      	bne.n	8000574 <__divdi3+0x60>
 8000572:	e098      	b.n	80006a6 <__divdi3+0x192>
 8000574:	2300      	movs	r3, #0
 8000576:	4699      	mov	r9, r3
 8000578:	0039      	movs	r1, r7
 800057a:	0030      	movs	r0, r6
 800057c:	f7ff ffbe 	bl	80004fc <__clzdi2>
 8000580:	4680      	mov	r8, r0
 8000582:	0029      	movs	r1, r5
 8000584:	0020      	movs	r0, r4
 8000586:	f7ff ffb9 	bl	80004fc <__clzdi2>
 800058a:	4643      	mov	r3, r8
 800058c:	1a1b      	subs	r3, r3, r0
 800058e:	4698      	mov	r8, r3
 8000590:	3b20      	subs	r3, #32
 8000592:	d500      	bpl.n	8000596 <__divdi3+0x82>
 8000594:	e07c      	b.n	8000690 <__divdi3+0x17c>
 8000596:	0031      	movs	r1, r6
 8000598:	4099      	lsls	r1, r3
 800059a:	469a      	mov	sl, r3
 800059c:	000b      	movs	r3, r1
 800059e:	0031      	movs	r1, r6
 80005a0:	4640      	mov	r0, r8
 80005a2:	4081      	lsls	r1, r0
 80005a4:	000a      	movs	r2, r1
 80005a6:	42ab      	cmp	r3, r5
 80005a8:	d85f      	bhi.n	800066a <__divdi3+0x156>
 80005aa:	d05c      	beq.n	8000666 <__divdi3+0x152>
 80005ac:	4651      	mov	r1, sl
 80005ae:	1aa4      	subs	r4, r4, r2
 80005b0:	419d      	sbcs	r5, r3
 80005b2:	2900      	cmp	r1, #0
 80005b4:	da00      	bge.n	80005b8 <__divdi3+0xa4>
 80005b6:	e093      	b.n	80006e0 <__divdi3+0x1cc>
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	2601      	movs	r6, #1
 80005be:	9000      	str	r0, [sp, #0]
 80005c0:	9101      	str	r1, [sp, #4]
 80005c2:	4651      	mov	r1, sl
 80005c4:	408e      	lsls	r6, r1
 80005c6:	9601      	str	r6, [sp, #4]
 80005c8:	4641      	mov	r1, r8
 80005ca:	2601      	movs	r6, #1
 80005cc:	408e      	lsls	r6, r1
 80005ce:	4641      	mov	r1, r8
 80005d0:	9600      	str	r6, [sp, #0]
 80005d2:	2900      	cmp	r1, #0
 80005d4:	d050      	beq.n	8000678 <__divdi3+0x164>
 80005d6:	07d9      	lsls	r1, r3, #31
 80005d8:	0856      	lsrs	r6, r2, #1
 80005da:	430e      	orrs	r6, r1
 80005dc:	085f      	lsrs	r7, r3, #1
 80005de:	4641      	mov	r1, r8
 80005e0:	2201      	movs	r2, #1
 80005e2:	2300      	movs	r3, #0
 80005e4:	e00c      	b.n	8000600 <__divdi3+0xec>
 80005e6:	42af      	cmp	r7, r5
 80005e8:	d101      	bne.n	80005ee <__divdi3+0xda>
 80005ea:	42a6      	cmp	r6, r4
 80005ec:	d80a      	bhi.n	8000604 <__divdi3+0xf0>
 80005ee:	1ba4      	subs	r4, r4, r6
 80005f0:	41bd      	sbcs	r5, r7
 80005f2:	1924      	adds	r4, r4, r4
 80005f4:	416d      	adcs	r5, r5
 80005f6:	3901      	subs	r1, #1
 80005f8:	18a4      	adds	r4, r4, r2
 80005fa:	415d      	adcs	r5, r3
 80005fc:	2900      	cmp	r1, #0
 80005fe:	d006      	beq.n	800060e <__divdi3+0xfa>
 8000600:	42af      	cmp	r7, r5
 8000602:	d9f0      	bls.n	80005e6 <__divdi3+0xd2>
 8000604:	3901      	subs	r1, #1
 8000606:	1924      	adds	r4, r4, r4
 8000608:	416d      	adcs	r5, r5
 800060a:	2900      	cmp	r1, #0
 800060c:	d1f8      	bne.n	8000600 <__divdi3+0xec>
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	4653      	mov	r3, sl
 8000614:	1900      	adds	r0, r0, r4
 8000616:	4169      	adcs	r1, r5
 8000618:	2b00      	cmp	r3, #0
 800061a:	db48      	blt.n	80006ae <__divdi3+0x19a>
 800061c:	002e      	movs	r6, r5
 800061e:	002c      	movs	r4, r5
 8000620:	40de      	lsrs	r6, r3
 8000622:	4643      	mov	r3, r8
 8000624:	40dc      	lsrs	r4, r3
 8000626:	4653      	mov	r3, sl
 8000628:	2b00      	cmp	r3, #0
 800062a:	db50      	blt.n	80006ce <__divdi3+0x1ba>
 800062c:	0034      	movs	r4, r6
 800062e:	409c      	lsls	r4, r3
 8000630:	0023      	movs	r3, r4
 8000632:	4644      	mov	r4, r8
 8000634:	40a6      	lsls	r6, r4
 8000636:	0032      	movs	r2, r6
 8000638:	1a80      	subs	r0, r0, r2
 800063a:	4199      	sbcs	r1, r3
 800063c:	e01e      	b.n	800067c <__divdi3+0x168>
 800063e:	2300      	movs	r3, #0
 8000640:	4262      	negs	r2, r4
 8000642:	41ab      	sbcs	r3, r5
 8000644:	0014      	movs	r4, r2
 8000646:	001d      	movs	r5, r3
 8000648:	2900      	cmp	r1, #0
 800064a:	db8b      	blt.n	8000564 <__divdi3+0x50>
 800064c:	0006      	movs	r6, r0
 800064e:	000f      	movs	r7, r1
 8000650:	4299      	cmp	r1, r3
 8000652:	d900      	bls.n	8000656 <__divdi3+0x142>
 8000654:	e771      	b.n	800053a <__divdi3+0x26>
 8000656:	d102      	bne.n	800065e <__divdi3+0x14a>
 8000658:	4290      	cmp	r0, r2
 800065a:	d900      	bls.n	800065e <__divdi3+0x14a>
 800065c:	e76d      	b.n	800053a <__divdi3+0x26>
 800065e:	2301      	movs	r3, #1
 8000660:	425b      	negs	r3, r3
 8000662:	4699      	mov	r9, r3
 8000664:	e788      	b.n	8000578 <__divdi3+0x64>
 8000666:	42a1      	cmp	r1, r4
 8000668:	d9a0      	bls.n	80005ac <__divdi3+0x98>
 800066a:	2100      	movs	r1, #0
 800066c:	2000      	movs	r0, #0
 800066e:	9000      	str	r0, [sp, #0]
 8000670:	9101      	str	r1, [sp, #4]
 8000672:	4641      	mov	r1, r8
 8000674:	2900      	cmp	r1, #0
 8000676:	d1ae      	bne.n	80005d6 <__divdi3+0xc2>
 8000678:	9800      	ldr	r0, [sp, #0]
 800067a:	9901      	ldr	r1, [sp, #4]
 800067c:	464b      	mov	r3, r9
 800067e:	2b00      	cmp	r3, #0
 8000680:	d100      	bne.n	8000684 <__divdi3+0x170>
 8000682:	e75c      	b.n	800053e <__divdi3+0x2a>
 8000684:	0003      	movs	r3, r0
 8000686:	000c      	movs	r4, r1
 8000688:	2100      	movs	r1, #0
 800068a:	4258      	negs	r0, r3
 800068c:	41a1      	sbcs	r1, r4
 800068e:	e756      	b.n	800053e <__divdi3+0x2a>
 8000690:	4642      	mov	r2, r8
 8000692:	0038      	movs	r0, r7
 8000694:	469a      	mov	sl, r3
 8000696:	2320      	movs	r3, #32
 8000698:	0031      	movs	r1, r6
 800069a:	4090      	lsls	r0, r2
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	40d9      	lsrs	r1, r3
 80006a0:	0003      	movs	r3, r0
 80006a2:	430b      	orrs	r3, r1
 80006a4:	e77b      	b.n	800059e <__divdi3+0x8a>
 80006a6:	42a6      	cmp	r6, r4
 80006a8:	d800      	bhi.n	80006ac <__divdi3+0x198>
 80006aa:	e763      	b.n	8000574 <__divdi3+0x60>
 80006ac:	e745      	b.n	800053a <__divdi3+0x26>
 80006ae:	4642      	mov	r2, r8
 80006b0:	2320      	movs	r3, #32
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	002a      	movs	r2, r5
 80006b6:	409a      	lsls	r2, r3
 80006b8:	0026      	movs	r6, r4
 80006ba:	0013      	movs	r3, r2
 80006bc:	4642      	mov	r2, r8
 80006be:	40d6      	lsrs	r6, r2
 80006c0:	002c      	movs	r4, r5
 80006c2:	431e      	orrs	r6, r3
 80006c4:	4643      	mov	r3, r8
 80006c6:	40dc      	lsrs	r4, r3
 80006c8:	4653      	mov	r3, sl
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	daae      	bge.n	800062c <__divdi3+0x118>
 80006ce:	4642      	mov	r2, r8
 80006d0:	2320      	movs	r3, #32
 80006d2:	0035      	movs	r5, r6
 80006d4:	4094      	lsls	r4, r2
 80006d6:	1a9b      	subs	r3, r3, r2
 80006d8:	40dd      	lsrs	r5, r3
 80006da:	0023      	movs	r3, r4
 80006dc:	432b      	orrs	r3, r5
 80006de:	e7a8      	b.n	8000632 <__divdi3+0x11e>
 80006e0:	4641      	mov	r1, r8
 80006e2:	2620      	movs	r6, #32
 80006e4:	2701      	movs	r7, #1
 80006e6:	1a76      	subs	r6, r6, r1
 80006e8:	2000      	movs	r0, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	40f7      	lsrs	r7, r6
 80006ee:	9000      	str	r0, [sp, #0]
 80006f0:	9101      	str	r1, [sp, #4]
 80006f2:	9701      	str	r7, [sp, #4]
 80006f4:	e768      	b.n	80005c8 <__divdi3+0xb4>
 80006f6:	46c0      	nop			@ (mov r8, r8)

080006f8 <__clzsi2>:
 80006f8:	211c      	movs	r1, #28
 80006fa:	2301      	movs	r3, #1
 80006fc:	041b      	lsls	r3, r3, #16
 80006fe:	4298      	cmp	r0, r3
 8000700:	d301      	bcc.n	8000706 <__clzsi2+0xe>
 8000702:	0c00      	lsrs	r0, r0, #16
 8000704:	3910      	subs	r1, #16
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	4298      	cmp	r0, r3
 800070a:	d301      	bcc.n	8000710 <__clzsi2+0x18>
 800070c:	0a00      	lsrs	r0, r0, #8
 800070e:	3908      	subs	r1, #8
 8000710:	091b      	lsrs	r3, r3, #4
 8000712:	4298      	cmp	r0, r3
 8000714:	d301      	bcc.n	800071a <__clzsi2+0x22>
 8000716:	0900      	lsrs	r0, r0, #4
 8000718:	3904      	subs	r1, #4
 800071a:	a202      	add	r2, pc, #8	@ (adr r2, 8000724 <__clzsi2+0x2c>)
 800071c:	5c10      	ldrb	r0, [r2, r0]
 800071e:	1840      	adds	r0, r0, r1
 8000720:	4770      	bx	lr
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	02020304 	.word	0x02020304
 8000728:	01010101 	.word	0x01010101
	...

08000734 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000736:	0004      	movs	r4, r0
 8000738:	000e      	movs	r6, r1
 800073a:	2500      	movs	r5, #0
	for(uint8_t i = 0; i < len; i++)
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800073c:	2701      	movs	r7, #1
{
 800073e:	9201      	str	r2, [sp, #4]
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000740:	0032      	movs	r2, r6
 8000742:	412a      	asrs	r2, r5
 8000744:	6863      	ldr	r3, [r4, #4]
 8000746:	0069      	lsls	r1, r5, #1
 8000748:	5ac9      	ldrh	r1, [r1, r3]
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	00a8      	lsls	r0, r5, #2
 800074e:	58c0      	ldr	r0, [r0, r3]
 8000750:	403a      	ands	r2, r7
 8000752:	f000 fcd3 	bl	80010fc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000756:	9b01      	ldr	r3, [sp, #4]
 8000758:	3501      	adds	r5, #1
 800075a:	42ab      	cmp	r3, r5
 800075c:	d1f0      	bne.n	8000740 <lcd_write+0xc>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800075e:	8aa1      	ldrh	r1, [r4, #20]
 8000760:	2201      	movs	r2, #1
 8000762:	6920      	ldr	r0, [r4, #16]
 8000764:	f000 fcca 	bl	80010fc <HAL_GPIO_WritePin>
	DELAY(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fbb3 	bl	8000ed4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800076e:	2200      	movs	r2, #0
 8000770:	8aa1      	ldrh	r1, [r4, #20]
 8000772:	6920      	ldr	r0, [r4, #16]
 8000774:	f000 fcc2 	bl	80010fc <HAL_GPIO_WritePin>
}
 8000778:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800077a <lcd_write_command.part.0>:
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
 800077a:	b570      	push	{r4, r5, r6, lr}
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800077c:	2204      	movs	r2, #4
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
 800077e:	000c      	movs	r4, r1
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000780:	0909      	lsrs	r1, r1, #4
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
 8000782:	0005      	movs	r5, r0
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000784:	f7ff ffd6 	bl	8000734 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000788:	210f      	movs	r1, #15
 800078a:	0028      	movs	r0, r5
 800078c:	2204      	movs	r2, #4
 800078e:	4021      	ands	r1, r4
 8000790:	f7ff ffd0 	bl	8000734 <lcd_write>
}
 8000794:	bd70      	pop	{r4, r5, r6, pc}

08000796 <lcd_write_command>:
{
 8000796:	b570      	push	{r4, r5, r6, lr}
 8000798:	0004      	movs	r4, r0
 800079a:	000d      	movs	r5, r1
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800079c:	2200      	movs	r2, #0
 800079e:	8981      	ldrh	r1, [r0, #12]
 80007a0:	6880      	ldr	r0, [r0, #8]
 80007a2:	f000 fcab 	bl	80010fc <HAL_GPIO_WritePin>
	if(lcd->mode == LCD_4_BIT_MODE)
 80007a6:	7da3      	ldrb	r3, [r4, #22]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d104      	bne.n	80007b6 <lcd_write_command+0x20>
 80007ac:	0029      	movs	r1, r5
 80007ae:	0020      	movs	r0, r4
 80007b0:	f7ff ffe3 	bl	800077a <lcd_write_command.part.0>
}
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
		lcd_write(lcd, command, LCD_BYTE);
 80007b6:	2208      	movs	r2, #8
 80007b8:	0029      	movs	r1, r5
 80007ba:	0020      	movs	r0, r4
 80007bc:	f7ff ffba 	bl	8000734 <lcd_write>
}
 80007c0:	e7f8      	b.n	80007b4 <lcd_write_command+0x1e>

080007c2 <lcd_write_data>:
{
 80007c2:	b570      	push	{r4, r5, r6, lr}
 80007c4:	0004      	movs	r4, r0
 80007c6:	000d      	movs	r5, r1
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80007c8:	2201      	movs	r2, #1
 80007ca:	8981      	ldrh	r1, [r0, #12]
 80007cc:	6880      	ldr	r0, [r0, #8]
 80007ce:	f000 fc95 	bl	80010fc <HAL_GPIO_WritePin>
	if(lcd->mode == LCD_4_BIT_MODE)
 80007d2:	7da3      	ldrb	r3, [r4, #22]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d104      	bne.n	80007e2 <lcd_write_data+0x20>
 80007d8:	0029      	movs	r1, r5
 80007da:	0020      	movs	r0, r4
 80007dc:	f7ff ffcd 	bl	800077a <lcd_write_command.part.0>
}
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
		lcd_write(lcd, data, LCD_BYTE);
 80007e2:	2208      	movs	r2, #8
 80007e4:	0029      	movs	r1, r5
 80007e6:	0020      	movs	r0, r4
 80007e8:	f7ff ffa4 	bl	8000734 <lcd_write>
}
 80007ec:	e7f8      	b.n	80007e0 <lcd_write_data+0x1e>

080007ee <Lcd_init>:
{
 80007ee:	b510      	push	{r4, lr}
	if(lcd->mode == LCD_4_BIT_MODE)
 80007f0:	7d83      	ldrb	r3, [r0, #22]
{
 80007f2:	0004      	movs	r4, r0
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80007f4:	2138      	movs	r1, #56	@ 0x38
	if(lcd->mode == LCD_4_BIT_MODE)
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d107      	bne.n	800080a <Lcd_init+0x1c>
			lcd_write_command(lcd, 0x33);
 80007fa:	2133      	movs	r1, #51	@ 0x33
 80007fc:	f7ff ffcb 	bl	8000796 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000800:	2132      	movs	r1, #50	@ 0x32
 8000802:	0020      	movs	r0, r4
 8000804:	f7ff ffc7 	bl	8000796 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000808:	2128      	movs	r1, #40	@ 0x28
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800080a:	0020      	movs	r0, r4
 800080c:	f7ff ffc3 	bl	8000796 <lcd_write_command>
	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000810:	0020      	movs	r0, r4
 8000812:	2101      	movs	r1, #1
 8000814:	f7ff ffbf 	bl	8000796 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);		// Lcd-on, cursor-off, no-blink
 8000818:	0020      	movs	r0, r4
 800081a:	210e      	movs	r1, #14
 800081c:	f7ff ffbb 	bl	8000796 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC  );			// Increment cursor
 8000820:	2106      	movs	r1, #6
 8000822:	0020      	movs	r0, r4
 8000824:	f7ff ffb7 	bl	8000796 <lcd_write_command>
}
 8000828:	bd10      	pop	{r4, pc}

0800082a <Lcd_create>:
{
 800082a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082c:	b087      	sub	sp, #28
 800082e:	ac0e      	add	r4, sp, #56	@ 0x38
 8000830:	8826      	ldrh	r6, [r4, #0]
 8000832:	ac0f      	add	r4, sp, #60	@ 0x3c
 8000834:	7827      	ldrb	r7, [r4, #0]
	lcd.mode = mode;
 8000836:	466c      	mov	r4, sp
{
 8000838:	0005      	movs	r5, r0
 800083a:	a80c      	add	r0, sp, #48	@ 0x30
 800083c:	8800      	ldrh	r0, [r0, #0]
	lcd.en_pin = en_pin;
 800083e:	82a6      	strh	r6, [r4, #20]
	lcd.en_port = en_port;
 8000840:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
	lcd.rs_pin = rs_pin;
 8000842:	81a0      	strh	r0, [r4, #12]
	Lcd_init(&lcd);
 8000844:	0020      	movs	r0, r4
	lcd.data_pin = pin;
 8000846:	6062      	str	r2, [r4, #4]
	lcd.data_port = port;
 8000848:	9100      	str	r1, [sp, #0]
	lcd.mode = mode;
 800084a:	75a7      	strb	r7, [r4, #22]
	lcd.en_port = en_port;
 800084c:	6126      	str	r6, [r4, #16]
	lcd.rs_port = rs_port;
 800084e:	60a3      	str	r3, [r4, #8]
	Lcd_init(&lcd);
 8000850:	f7ff ffcd 	bl	80007ee <Lcd_init>
	return lcd;
 8000854:	002b      	movs	r3, r5
 8000856:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000858:	c307      	stmia	r3!, {r0, r1, r2}
 800085a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800085c:	c307      	stmia	r3!, {r0, r1, r2}
}
 800085e:	0028      	movs	r0, r5
 8000860:	b007      	add	sp, #28
 8000862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000864 <Lcd_string>:
{
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	0006      	movs	r6, r0
 8000868:	000d      	movs	r5, r1
	for(uint8_t i = 0; i < strlen(string); i++)
 800086a:	2400      	movs	r4, #0
 800086c:	0028      	movs	r0, r5
 800086e:	f7ff fc4b 	bl	8000108 <strlen>
 8000872:	4284      	cmp	r4, r0
 8000874:	d300      	bcc.n	8000878 <Lcd_string+0x14>
}
 8000876:	bd70      	pop	{r4, r5, r6, pc}
		lcd_write_data(lcd, string[i]);
 8000878:	5d29      	ldrb	r1, [r5, r4]
 800087a:	0030      	movs	r0, r6
	for(uint8_t i = 0; i < strlen(string); i++)
 800087c:	3401      	adds	r4, #1
		lcd_write_data(lcd, string[i]);
 800087e:	f7ff ffa0 	bl	80007c2 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000882:	b2e4      	uxtb	r4, r4
 8000884:	e7f2      	b.n	800086c <Lcd_string+0x8>
	...

08000888 <Lcd_cursor>:
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <Lcd_cursor+0x14>)
{
 800088a:	b510      	push	{r4, lr}
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 800088c:	5c59      	ldrb	r1, [r3, r1]
 800088e:	3a80      	subs	r2, #128	@ 0x80
 8000890:	1889      	adds	r1, r1, r2
 8000892:	b2c9      	uxtb	r1, r1
 8000894:	f7ff ff7f 	bl	8000796 <lcd_write_command>
}
 8000898:	bd10      	pop	{r4, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	080016f4 	.word	0x080016f4

080008a0 <Lcd_clear>:
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80008a0:	b510      	push	{r4, lr}
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80008a2:	2101      	movs	r1, #1
 80008a4:	f7ff ff77 	bl	8000796 <lcd_write_command>
}
 80008a8:	bd10      	pop	{r4, pc}

080008aa <longLongToStr>:

void longLongToStr(int64_t num, char *str) {
    int8_t i = 0;
    int8_t isNegative = 0;
 80008aa:	2300      	movs	r3, #0
void longLongToStr(int64_t num, char *str) {
 80008ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80008ae:	0004      	movs	r4, r0
 80008b0:	000d      	movs	r5, r1
 80008b2:	0017      	movs	r7, r2
    int8_t isNegative = 0;
 80008b4:	9300      	str	r3, [sp, #0]

    // Xử lý số âm
    if (num < 0) {
 80008b6:	4299      	cmp	r1, r3
 80008b8:	da06      	bge.n	80008c8 <longLongToStr+0x1e>
        isNegative = 1;
        num = -num;
 80008ba:	000b      	movs	r3, r1
 80008bc:	0002      	movs	r2, r0
 80008be:	2500      	movs	r5, #0
 80008c0:	4254      	negs	r4, r2
 80008c2:	419d      	sbcs	r5, r3
        isNegative = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2600      	movs	r6, #0
    }

    // Chuyển từng chữ số sang ký tự
    do {
        str[i++] = (num % 10) + '0';
 80008ca:	0020      	movs	r0, r4
 80008cc:	0029      	movs	r1, r5
 80008ce:	220a      	movs	r2, #10
 80008d0:	2300      	movs	r3, #0
 80008d2:	f7ff fcb7 	bl	8000244 <__aeabi_ldivmod>
 80008d6:	46b4      	mov	ip, r6
 80008d8:	9101      	str	r1, [sp, #4]
 80008da:	4661      	mov	r1, ip
 80008dc:	b2f3      	uxtb	r3, r6
 80008de:	3230      	adds	r2, #48	@ 0x30
 80008e0:	1c5e      	adds	r6, r3, #1
 80008e2:	46a4      	mov	ip, r4
 80008e4:	547a      	strb	r2, [r7, r1]
        num /= 10;
 80008e6:	0004      	movs	r4, r0
 80008e8:	002a      	movs	r2, r5
        str[i++] = (num % 10) + '0';
 80008ea:	b276      	sxtb	r6, r6
        num /= 10;
 80008ec:	9d01      	ldr	r5, [sp, #4]
    } while (num > 0);
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	dceb      	bgt.n	80008ca <longLongToStr+0x20>
 80008f2:	d102      	bne.n	80008fa <longLongToStr+0x50>
 80008f4:	4662      	mov	r2, ip
 80008f6:	2a09      	cmp	r2, #9
 80008f8:	d8e7      	bhi.n	80008ca <longLongToStr+0x20>

    // Thêm dấu trừ nếu là số âm
    if (isNegative) {
 80008fa:	9a00      	ldr	r2, [sp, #0]
 80008fc:	2a00      	cmp	r2, #0
 80008fe:	d003      	beq.n	8000908 <longLongToStr+0x5e>
        str[i++] = '-';
 8000900:	222d      	movs	r2, #45	@ 0x2d
 8000902:	3302      	adds	r3, #2
 8000904:	55ba      	strb	r2, [r7, r6]
 8000906:	b25e      	sxtb	r6, r3
    }

    // Kết thúc chuỗi
    str[i] = '\0';
 8000908:	2300      	movs	r3, #0

    // Đảo ngược chuỗi
    for (int8_t j = 0; j < i / 2; j++) {
 800090a:	0ff1      	lsrs	r1, r6, #31
    str[i] = '\0';
 800090c:	19ba      	adds	r2, r7, r6
    for (int8_t j = 0; j < i / 2; j++) {
 800090e:	1989      	adds	r1, r1, r6
    str[i] = '\0';
 8000910:	7013      	strb	r3, [r2, #0]
    for (int8_t j = 0; j < i / 2; j++) {
 8000912:	1049      	asrs	r1, r1, #1
 8000914:	b258      	sxtb	r0, r3
 8000916:	3a01      	subs	r2, #1
 8000918:	4281      	cmp	r1, r0
 800091a:	dc00      	bgt.n	800091e <longLongToStr+0x74>
        char temp = str[j];
        str[j] = str[i - j - 1];
        str[i - j - 1] = temp;
    }
}
 800091c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        char temp = str[j];
 800091e:	5cf8      	ldrb	r0, [r7, r3]
        str[j] = str[i - j - 1];
 8000920:	7814      	ldrb	r4, [r2, #0]
 8000922:	54fc      	strb	r4, [r7, r3]
        str[i - j - 1] = temp;
 8000924:	7010      	strb	r0, [r2, #0]
    for (int8_t j = 0; j < i / 2; j++) {
 8000926:	3301      	adds	r3, #1
 8000928:	e7f4      	b.n	8000914 <longLongToStr+0x6a>

0800092a <Lcd_int>:
{
 800092a:	b510      	push	{r4, lr}
 800092c:	0004      	movs	r4, r0
 800092e:	b086      	sub	sp, #24
 8000930:	0019      	movs	r1, r3
 8000932:	0010      	movs	r0, r2
	longLongToStr(number, buffer);
 8000934:	aa01      	add	r2, sp, #4
 8000936:	f7ff ffb8 	bl	80008aa <longLongToStr>
	Lcd_string(lcd, buffer);
 800093a:	0020      	movs	r0, r4
 800093c:	a901      	add	r1, sp, #4
 800093e:	f7ff ff91 	bl	8000864 <Lcd_string>
}
 8000942:	b006      	add	sp, #24
 8000944:	bd10      	pop	{r4, pc}
	...

08000948 <selectRow>:

uint64_t kq=0;
uint32_t num1=0;

void selectRow(uint8_t row)
{
 8000948:	b510      	push	{r4, lr}
	switch (row){
 800094a:	2807      	cmp	r0, #7
 800094c:	d816      	bhi.n	800097c <selectRow+0x34>
 800094e:	f7ff fbe3 	bl	8000118 <__gnu_thumb1_case_uqi>
 8000952:	1604      	.short	0x1604
 8000954:	36342c24 	.word	0x36342c24
 8000958:	3a38      	.short	0x3a38
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800095a:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
		break;
	case 4:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800095c:	2090      	movs	r0, #144	@ 0x90
 800095e:	2140      	movs	r1, #64	@ 0x40
 8000960:	05c0      	lsls	r0, r0, #23
 8000962:	f000 fbcb 	bl	80010fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000966:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
		break;
	case 6:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000968:	2090      	movs	r0, #144	@ 0x90
 800096a:	2180      	movs	r1, #128	@ 0x80
 800096c:	05c0      	lsls	r0, r0, #23
 800096e:	f000 fbc5 	bl	80010fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000972:	2200      	movs	r2, #0
		break;
	case 7:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000974:	2102      	movs	r1, #2
 8000976:	4815      	ldr	r0, [pc, #84]	@ (80009cc <selectRow+0x84>)
 8000978:	f000 fbc0 	bl	80010fc <HAL_GPIO_WritePin>
		break;
	}
};
 800097c:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800097e:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000980:	2090      	movs	r0, #144	@ 0x90
 8000982:	2140      	movs	r1, #64	@ 0x40
 8000984:	05c0      	lsls	r0, r0, #23
 8000986:	f000 fbb9 	bl	80010fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800098a:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800098c:	2090      	movs	r0, #144	@ 0x90
 800098e:	2180      	movs	r1, #128	@ 0x80
 8000990:	05c0      	lsls	r0, r0, #23
 8000992:	f000 fbb3 	bl	80010fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000996:	2201      	movs	r2, #1
 8000998:	e7ec      	b.n	8000974 <selectRow+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800099a:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800099c:	2090      	movs	r0, #144	@ 0x90
 800099e:	2140      	movs	r1, #64	@ 0x40
 80009a0:	05c0      	lsls	r0, r0, #23
 80009a2:	f000 fbab 	bl	80010fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	e7de      	b.n	8000968 <selectRow+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80009aa:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80009ac:	2090      	movs	r0, #144	@ 0x90
 80009ae:	2140      	movs	r1, #64	@ 0x40
 80009b0:	05c0      	lsls	r0, r0, #23
 80009b2:	f000 fba3 	bl	80010fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	e7e8      	b.n	800098c <selectRow+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	e7ce      	b.n	800095c <selectRow+0x14>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	e7de      	b.n	8000980 <selectRow+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	e7ea      	b.n	800099c <selectRow+0x54>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	e7f0      	b.n	80009ac <selectRow+0x64>
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	48000400 	.word	0x48000400

080009d0 <Keypad_Getkey>:

uint8_t row;
uint8_t col;
uint8_t Keypad_Getkey()

{
 80009d0:	b570      	push	{r4, r5, r6, lr}
	for (row=0 ; row<8 ; row ++)
	{
		selectRow(row);
		HAL_Delay(2);
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 80009d2:	2580      	movs	r5, #128	@ 0x80
 80009d4:	2490      	movs	r4, #144	@ 0x90
	for (row=0 ; row<8 ; row ++)
 80009d6:	2000      	movs	r0, #0
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 80009d8:	00ed      	lsls	r5, r5, #3
 80009da:	05e4      	lsls	r4, r4, #23
	for (row=0 ; row<8 ; row ++)
 80009dc:	4e1c      	ldr	r6, [pc, #112]	@ (8000a50 <Keypad_Getkey+0x80>)
 80009de:	7030      	strb	r0, [r6, #0]
 80009e0:	2807      	cmp	r0, #7
 80009e2:	d901      	bls.n	80009e8 <Keypad_Getkey+0x18>
				HAL_Delay(50);
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
				return key_code[row][1];
			}
	}
	return 0;
 80009e4:	2000      	movs	r0, #0
 80009e6:	e017      	b.n	8000a18 <Keypad_Getkey+0x48>
		selectRow(row);
 80009e8:	f7ff ffae 	bl	8000948 <selectRow>
		HAL_Delay(2);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f000 fa71 	bl	8000ed4 <HAL_Delay>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 80009f2:	0029      	movs	r1, r5
 80009f4:	0020      	movs	r0, r4
 80009f6:	f000 fb7b 	bl	80010f0 <HAL_GPIO_ReadPin>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d10d      	bne.n	8000a1a <Keypad_Getkey+0x4a>
				HAL_Delay(50);
 80009fe:	3032      	adds	r0, #50	@ 0x32
 8000a00:	f000 fa68 	bl	8000ed4 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 8000a04:	0029      	movs	r1, r5
 8000a06:	0020      	movs	r0, r4
 8000a08:	f000 fb72 	bl	80010f0 <HAL_GPIO_ReadPin>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d11b      	bne.n	8000a48 <Keypad_Getkey+0x78>
				return key_code[row][0];
 8000a10:	7832      	ldrb	r2, [r6, #0]
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <Keypad_Getkey+0x84>)
 8000a14:	0052      	lsls	r2, r2, #1
 8000a16:	5cd0      	ldrb	r0, [r2, r3]
}
 8000a18:	bd70      	pop	{r4, r5, r6, pc}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8000a1a:	2180      	movs	r1, #128	@ 0x80
 8000a1c:	0020      	movs	r0, r4
 8000a1e:	0089      	lsls	r1, r1, #2
 8000a20:	f000 fb66 	bl	80010f0 <HAL_GPIO_ReadPin>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d10f      	bne.n	8000a48 <Keypad_Getkey+0x78>
				HAL_Delay(50);
 8000a28:	3032      	adds	r0, #50	@ 0x32
 8000a2a:	f000 fa53 	bl	8000ed4 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8000a2e:	2180      	movs	r1, #128	@ 0x80
 8000a30:	0020      	movs	r0, r4
 8000a32:	0089      	lsls	r1, r1, #2
 8000a34:	f000 fb5c 	bl	80010f0 <HAL_GPIO_ReadPin>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d105      	bne.n	8000a48 <Keypad_Getkey+0x78>
				return key_code[row][1];
 8000a3c:	7832      	ldrb	r2, [r6, #0]
 8000a3e:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <Keypad_Getkey+0x84>)
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	7858      	ldrb	r0, [r3, #1]
 8000a46:	e7e7      	b.n	8000a18 <Keypad_Getkey+0x48>
	for (row=0 ; row<8 ; row ++)
 8000a48:	7830      	ldrb	r0, [r6, #0]
 8000a4a:	3001      	adds	r0, #1
 8000a4c:	b2c0      	uxtb	r0, r0
 8000a4e:	e7c5      	b.n	80009dc <Keypad_Getkey+0xc>
 8000a50:	2000002c 	.word	0x2000002c
 8000a54:	08001700 	.word	0x08001700

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5a:	2510      	movs	r5, #16
{
 8000a5c:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	222c      	movs	r2, #44	@ 0x2c
 8000a60:	2100      	movs	r1, #0
 8000a62:	a805      	add	r0, sp, #20
 8000a64:	f000 fdf8 	bl	8001658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	2100      	movs	r1, #0
 8000a6a:	002a      	movs	r2, r5
 8000a6c:	4668      	mov	r0, sp
 8000a6e:	f000 fdf3 	bl	8001658 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a72:	2301      	movs	r3, #1
 8000a74:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000a76:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a78:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000a7a:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a7e:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a80:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a82:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000a84:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f000 fb3f 	bl	8001108 <HAL_RCC_OscConfig>
 8000a8a:	1e01      	subs	r1, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a94:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a96:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a98:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a9e:	f000 fd57 	bl	8001550 <HAL_RCC_ClockConfig>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x52>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <SystemClock_Config+0x50>
}
 8000aaa:	b011      	add	sp, #68	@ 0x44
 8000aac:	bd30      	pop	{r4, r5, pc}
	...

08000ab0 <main>:
{
 8000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab2:	b09f      	sub	sp, #124	@ 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	ac12      	add	r4, sp, #72	@ 0x48
int main(void)
 8000ab6:	ab24      	add	r3, sp, #144	@ 0x90
 8000ab8:	931d      	str	r3, [sp, #116]	@ 0x74
  HAL_Init();
 8000aba:	f000 f9e9 	bl	8000e90 <HAL_Init>
  SystemClock_Config();
 8000abe:	f7ff ffcb 	bl	8000a58 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	2214      	movs	r2, #20
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f000 fdc6 	bl	8001658 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000acc:	2180      	movs	r1, #128	@ 0x80
 8000ace:	4ba9      	ldr	r3, [pc, #676]	@ (8000d74 <main+0x2c4>)
 8000ad0:	03c9      	lsls	r1, r1, #15
 8000ad2:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ad4:	2590      	movs	r5, #144	@ 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	615a      	str	r2, [r3, #20]
 8000ada:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000adc:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ade:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae2:	920d      	str	r2, [sp, #52]	@ 0x34
 8000ae4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	0289      	lsls	r1, r1, #10
 8000aea:	430a      	orrs	r2, r1
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000af0:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	920e      	str	r2, [sp, #56]	@ 0x38
 8000af8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	695a      	ldr	r2, [r3, #20]
 8000afc:	02c9      	lsls	r1, r1, #11
 8000afe:	430a      	orrs	r2, r1
 8000b00:	615a      	str	r2, [r3, #20]
 8000b02:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b04:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	400b      	ands	r3, r1
 8000b08:	930f      	str	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b0a:	21ff      	movs	r1, #255	@ 0xff
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b0e:	f000 faf5 	bl	80010fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2102      	movs	r1, #2
 8000b16:	4898      	ldr	r0, [pc, #608]	@ (8000d78 <main+0x2c8>)
 8000b18:	f000 faf0 	bl	80010fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2600      	movs	r6, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b20:	23ff      	movs	r3, #255	@ 0xff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	0028      	movs	r0, r5
 8000b24:	0021      	movs	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	9713      	str	r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b28:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	9614      	str	r6, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	9615      	str	r6, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f000 fa27 	bl	8000f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = R0_Pin;
 8000b32:	2302      	movs	r3, #2
  HAL_GPIO_Init(R0_GPIO_Port, &GPIO_InitStruct);
 8000b34:	0021      	movs	r1, r4
 8000b36:	4890      	ldr	r0, [pc, #576]	@ (8000d78 <main+0x2c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	9713      	str	r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pin = R0_Pin;
 8000b3a:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	9614      	str	r6, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	9615      	str	r6, [sp, #84]	@ 0x54
  HAL_GPIO_Init(R0_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f000 fa1e 	bl	8000f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8000b44:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	0028      	movs	r0, r5
 8000b48:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8000b4a:	00db      	lsls	r3, r3, #3
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4c:	9714      	str	r7, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8000b4e:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	9613      	str	r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f000 fa15 	bl	8000f80 <HAL_GPIO_Init>
    Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8000b56:	4b89      	ldr	r3, [pc, #548]	@ (8000d7c <main+0x2cc>)
 8000b58:	469c      	mov	ip, r3
 8000b5a:	0023      	movs	r3, r4
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	ca83      	ldmia	r2!, {r0, r1, r7}
 8000b60:	c383      	stmia	r3!, {r0, r1, r7}
    Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8000b62:	4661      	mov	r1, ip
    Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8000b64:	6812      	ldr	r2, [r2, #0]
    Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8000b66:	3110      	adds	r1, #16
    Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8000b68:	601a      	str	r2, [r3, #0]
    Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8000b6a:	a810      	add	r0, sp, #64	@ 0x40
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	f000 fd9f 	bl	80016b0 <memcpy>
    lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 8000b72:	2701      	movs	r7, #1
 8000b74:	2302      	movs	r3, #2
 8000b76:	0021      	movs	r1, r4
 8000b78:	aa10      	add	r2, sp, #64	@ 0x40
 8000b7a:	a806      	add	r0, sp, #24
 8000b7c:	9302      	str	r3, [sp, #8]
 8000b7e:	9501      	str	r5, [sp, #4]
 8000b80:	002b      	movs	r3, r5
 8000b82:	9603      	str	r6, [sp, #12]
 8000b84:	9700      	str	r7, [sp, #0]
 8000b86:	f7ff fe50 	bl	800082a <Lcd_create>
 8000b8a:	ad06      	add	r5, sp, #24
 8000b8c:	ab17      	add	r3, sp, #92	@ 0x5c
 8000b8e:	cd07      	ldmia	r5!, {r0, r1, r2}
 8000b90:	c307      	stmia	r3!, {r0, r1, r2}
 8000b92:	cd07      	ldmia	r5!, {r0, r1, r2}
 8000b94:	c307      	stmia	r3!, {r0, r1, r2}
    Lcd_cursor(&lcd, 0,0);
 8000b96:	0032      	movs	r2, r6
 8000b98:	0031      	movs	r1, r6
 8000b9a:	a817      	add	r0, sp, #92	@ 0x5c
 8000b9c:	f7ff fe74 	bl	8000888 <Lcd_cursor>
	  key_current = Keypad_Getkey();
 8000ba0:	f7ff ff16 	bl	80009d0 <Keypad_Getkey>
 8000ba4:	4b76      	ldr	r3, [pc, #472]	@ (8000d80 <main+0x2d0>)
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	7018      	strb	r0, [r3, #0]
    	if ( key_current != key_last )
 8000baa:	4b76      	ldr	r3, [pc, #472]	@ (8000d84 <main+0x2d4>)
	  key_current = Keypad_Getkey();
 8000bac:	0004      	movs	r4, r0
    	if ( key_current != key_last )
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	d0f5      	beq.n	8000ba0 <main+0xf0>
    		if ( key_current !=0 ) Press(key_current);
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d100      	bne.n	8000bba <main+0x10a>
 8000bb8:	e0ab      	b.n	8000d12 <main+0x262>
    	if ((key==1) || (key==2) || (key==3) || (key==4) || (key==5) || (key==6) || (key==7) || (key==8) || (key==9) || (key==ko))
 8000bba:	1e43      	subs	r3, r0, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d902      	bls.n	8000bc8 <main+0x118>
 8000bc2:	2810      	cmp	r0, #16
 8000bc4:	d105      	bne.n	8000bd2 <main+0x122>
    			key=0;
 8000bc6:	2200      	movs	r2, #0
    			Lcd_int(&lcd, key);
 8000bc8:	2300      	movs	r3, #0
    		Lcd_int(&lcd, kq);
 8000bca:	a817      	add	r0, sp, #92	@ 0x5c
 8000bcc:	f7ff fead 	bl	800092a <Lcd_int>
    	if (key==DEL)
 8000bd0:	e00a      	b.n	8000be8 <main+0x138>
    	if ((key==cong))
 8000bd2:	280b      	cmp	r0, #11
 8000bd4:	d10d      	bne.n	8000bf2 <main+0x142>
    		Lcd_string(&lcd, "+");
 8000bd6:	496c      	ldr	r1, [pc, #432]	@ (8000d88 <main+0x2d8>)
 8000bd8:	a817      	add	r0, sp, #92	@ 0x5c
 8000bda:	f7ff fe43 	bl	8000864 <Lcd_string>
    		equaltion[pos] = 1;
 8000bde:	2101      	movs	r1, #1
 8000be0:	4a6a      	ldr	r2, [pc, #424]	@ (8000d8c <main+0x2dc>)
 8000be2:	4b6b      	ldr	r3, [pc, #428]	@ (8000d90 <main+0x2e0>)
 8000be4:	7812      	ldrb	r2, [r2, #0]
    		equaltion[pos] = 4;
 8000be6:	5499      	strb	r1, [r3, r2]
    		key_last = key_current;
 8000be8:	4a65      	ldr	r2, [pc, #404]	@ (8000d80 <main+0x2d0>)
 8000bea:	4b66      	ldr	r3, [pc, #408]	@ (8000d84 <main+0x2d4>)
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e7d6      	b.n	8000ba0 <main+0xf0>
    	else if ((key==tru))
 8000bf2:	280c      	cmp	r0, #12
 8000bf4:	d108      	bne.n	8000c08 <main+0x158>
    		Lcd_string(&lcd, "-");
 8000bf6:	4967      	ldr	r1, [pc, #412]	@ (8000d94 <main+0x2e4>)
 8000bf8:	a817      	add	r0, sp, #92	@ 0x5c
 8000bfa:	f7ff fe33 	bl	8000864 <Lcd_string>
    		equaltion[pos] = 2;
 8000bfe:	4a63      	ldr	r2, [pc, #396]	@ (8000d8c <main+0x2dc>)
 8000c00:	2102      	movs	r1, #2
 8000c02:	4b63      	ldr	r3, [pc, #396]	@ (8000d90 <main+0x2e0>)
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	e7ee      	b.n	8000be6 <main+0x136>
    	else if ((key==nhan))
 8000c08:	280d      	cmp	r0, #13
 8000c0a:	d108      	bne.n	8000c1e <main+0x16e>
    		Lcd_string(&lcd, "x");
 8000c0c:	4962      	ldr	r1, [pc, #392]	@ (8000d98 <main+0x2e8>)
 8000c0e:	a817      	add	r0, sp, #92	@ 0x5c
 8000c10:	f7ff fe28 	bl	8000864 <Lcd_string>
    		equaltion[pos] = 3;
 8000c14:	4a5d      	ldr	r2, [pc, #372]	@ (8000d8c <main+0x2dc>)
 8000c16:	2103      	movs	r1, #3
 8000c18:	4b5d      	ldr	r3, [pc, #372]	@ (8000d90 <main+0x2e0>)
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	e7e3      	b.n	8000be6 <main+0x136>
    	else if ((key==chia))
 8000c1e:	280e      	cmp	r0, #14
 8000c20:	d108      	bne.n	8000c34 <main+0x184>
    		Lcd_string(&lcd, ":");
 8000c22:	495e      	ldr	r1, [pc, #376]	@ (8000d9c <main+0x2ec>)
 8000c24:	a817      	add	r0, sp, #92	@ 0x5c
 8000c26:	f7ff fe1d 	bl	8000864 <Lcd_string>
    		equaltion[pos] = 4;
 8000c2a:	4a58      	ldr	r2, [pc, #352]	@ (8000d8c <main+0x2dc>)
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	4b58      	ldr	r3, [pc, #352]	@ (8000d90 <main+0x2e0>)
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	e7d8      	b.n	8000be6 <main+0x136>
    	if (key==bang)
 8000c34:	280f      	cmp	r0, #15
 8000c36:	d160      	bne.n	8000cfa <main+0x24a>
    		num[pos] = num1;
 8000c38:	4b59      	ldr	r3, [pc, #356]	@ (8000da0 <main+0x2f0>)
 8000c3a:	2600      	movs	r6, #0
 8000c3c:	9304      	str	r3, [sp, #16]
 8000c3e:	9f04      	ldr	r7, [sp, #16]
 8000c40:	4b52      	ldr	r3, [pc, #328]	@ (8000d8c <main+0x2dc>)
 8000c42:	003c      	movs	r4, r7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	9a04      	ldr	r2, [sp, #16]
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	18d3      	adds	r3, r2, r3
 8000c4c:	4a55      	ldr	r2, [pc, #340]	@ (8000da4 <main+0x2f4>)
 8000c4e:	605e      	str	r6, [r3, #4]
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	4d55      	ldr	r5, [pc, #340]	@ (8000da8 <main+0x2f8>)
 8000c54:	601a      	str	r2, [r3, #0]
    				else equaltion[i] = 1;
 8000c56:	4b4e      	ldr	r3, [pc, #312]	@ (8000d90 <main+0x2e0>)
 8000c58:	9305      	str	r3, [sp, #20]
    			if (equaltion[i] == 3)
 8000c5a:	786b      	ldrb	r3, [r5, #1]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d129      	bne.n	8000cb4 <main+0x204>
    				num[i+1] = num[i] * num[i+1];
 8000c60:	6822      	ldr	r2, [r4, #0]
 8000c62:	6863      	ldr	r3, [r4, #4]
 8000c64:	68a0      	ldr	r0, [r4, #8]
 8000c66:	68e1      	ldr	r1, [r4, #12]
 8000c68:	f7ff fb30 	bl	80002cc <__aeabi_lmul>
    				num[i] = 0;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2300      	movs	r3, #0
    				num[i+1] = num[i] / num[i+1];
 8000c70:	60a0      	str	r0, [r4, #8]
 8000c72:	60e1      	str	r1, [r4, #12]
    				num[i] = 0;
 8000c74:	6022      	str	r2, [r4, #0]
 8000c76:	6063      	str	r3, [r4, #4]
    				if (i>0)
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	d002      	beq.n	8000c82 <main+0x1d2>
    					equaltion[i] = equaltion[i-1];
 8000c7c:	782b      	ldrb	r3, [r5, #0]
 8000c7e:	706b      	strb	r3, [r5, #1]
 8000c80:	e002      	b.n	8000c88 <main+0x1d8>
    				else equaltion[i] = 1;
 8000c82:	2201      	movs	r2, #1
 8000c84:	9b05      	ldr	r3, [sp, #20]
 8000c86:	701a      	strb	r2, [r3, #0]
    		for(uint8_t i = 0; i < 9; i++)
 8000c88:	3601      	adds	r6, #1
 8000c8a:	b2f6      	uxtb	r6, r6
 8000c8c:	3408      	adds	r4, #8
 8000c8e:	3501      	adds	r5, #1
 8000c90:	2e09      	cmp	r6, #9
 8000c92:	d1e2      	bne.n	8000c5a <main+0x1aa>
 8000c94:	2300      	movs	r3, #0
    			if (equaltion[i] == 1)
 8000c96:	4e3e      	ldr	r6, [pc, #248]	@ (8000d90 <main+0x2e0>)
 8000c98:	5cf2      	ldrb	r2, [r6, r3]
 8000c9a:	2a01      	cmp	r2, #1
 8000c9c:	d113      	bne.n	8000cc6 <main+0x216>
    				num[i+1] = num[i] + num[i+1];
 8000c9e:	68b8      	ldr	r0, [r7, #8]
 8000ca0:	68f9      	ldr	r1, [r7, #12]
 8000ca2:	683c      	ldr	r4, [r7, #0]
 8000ca4:	687d      	ldr	r5, [r7, #4]
 8000ca6:	1900      	adds	r0, r0, r4
 8000ca8:	4169      	adcs	r1, r5
    				num[i+1] = num[i] - num[i+1];
 8000caa:	60b8      	str	r0, [r7, #8]
 8000cac:	60f9      	str	r1, [r7, #12]
    		for(uint8_t i = 0; i < 10; i++)
 8000cae:	3301      	adds	r3, #1
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	e7f1      	b.n	8000c98 <main+0x1e8>
    			else if (equaltion[i] == 4)
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d1e7      	bne.n	8000c88 <main+0x1d8>
    				num[i+1] = num[i] / num[i+1];
 8000cb8:	68a2      	ldr	r2, [r4, #8]
 8000cba:	68e3      	ldr	r3, [r4, #12]
 8000cbc:	6820      	ldr	r0, [r4, #0]
 8000cbe:	6861      	ldr	r1, [r4, #4]
 8000cc0:	f7ff fae4 	bl	800028c <__aeabi_uldivmod>
 8000cc4:	e7d2      	b.n	8000c6c <main+0x1bc>
    			else if (equaltion[i] == 2)
 8000cc6:	2a02      	cmp	r2, #2
 8000cc8:	d106      	bne.n	8000cd8 <main+0x228>
    				num[i+1] = num[i] - num[i+1];
 8000cca:	6838      	ldr	r0, [r7, #0]
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	68bc      	ldr	r4, [r7, #8]
 8000cd0:	68fd      	ldr	r5, [r7, #12]
 8000cd2:	1b00      	subs	r0, r0, r4
 8000cd4:	41a9      	sbcs	r1, r5
 8000cd6:	e7e8      	b.n	8000caa <main+0x1fa>
    			else if (equaltion[i] == 0) {
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d1e8      	bne.n	8000cae <main+0x1fe>
    				kq = num[i];
 8000cdc:	9904      	ldr	r1, [sp, #16]
 8000cde:	4c33      	ldr	r4, [pc, #204]	@ (8000dac <main+0x2fc>)
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	18cb      	adds	r3, r1, r3
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	6859      	ldr	r1, [r3, #4]
 8000ce8:	6020      	str	r0, [r4, #0]
 8000cea:	6061      	str	r1, [r4, #4]
    		Lcd_cursor(&lcd, 1, 0);
 8000cec:	2101      	movs	r1, #1
 8000cee:	a817      	add	r0, sp, #92	@ 0x5c
 8000cf0:	f7ff fdca 	bl	8000888 <Lcd_cursor>
    		Lcd_int(&lcd, kq);
 8000cf4:	6822      	ldr	r2, [r4, #0]
 8000cf6:	6863      	ldr	r3, [r4, #4]
 8000cf8:	e767      	b.n	8000bca <main+0x11a>
    	if (key==DEL)
 8000cfa:	280a      	cmp	r0, #10
 8000cfc:	d000      	beq.n	8000d00 <main+0x250>
 8000cfe:	e773      	b.n	8000be8 <main+0x138>
    		Lcd_clear(&lcd);
 8000d00:	a817      	add	r0, sp, #92	@ 0x5c
 8000d02:	f7ff fdcd 	bl	80008a0 <Lcd_clear>
    		Lcd_cursor(&lcd, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	a817      	add	r0, sp, #92	@ 0x5c
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	f7ff fdbc 	bl	8000888 <Lcd_cursor>
 8000d10:	e76a      	b.n	8000be8 <main+0x138>
    	  if ((key==1) || (key==2) || (key==3) || (key==4) || (key==5) || (key==6) || (key==7) || (key==8) || (key==9) || (key==ko))
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	2a08      	cmp	r2, #8
 8000d16:	d902      	bls.n	8000d1e <main+0x26e>
 8000d18:	2b10      	cmp	r3, #16
 8000d1a:	d107      	bne.n	8000d2c <main+0x27c>
    			  key=0;
 8000d1c:	0003      	movs	r3, r0
    	 	  num1 = num1*10 + key;
 8000d1e:	200a      	movs	r0, #10
 8000d20:	4920      	ldr	r1, [pc, #128]	@ (8000da4 <main+0x2f4>)
 8000d22:	680a      	ldr	r2, [r1, #0]
 8000d24:	4342      	muls	r2, r0
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	600b      	str	r3, [r1, #0]
    	  if ((key==cong) || (key==tru) || (key==nhan) || (key==chia))
 8000d2a:	e75d      	b.n	8000be8 <main+0x138>
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	3a0b      	subs	r2, #11
 8000d30:	2a03      	cmp	r2, #3
 8000d32:	d80c      	bhi.n	8000d4e <main+0x29e>
    		  num[pos] = num1;
 8000d34:	4915      	ldr	r1, [pc, #84]	@ (8000d8c <main+0x2dc>)
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <main+0x2f0>)
 8000d38:	780a      	ldrb	r2, [r1, #0]
 8000d3a:	00d0      	lsls	r0, r2, #3
 8000d3c:	181b      	adds	r3, r3, r0
 8000d3e:	4819      	ldr	r0, [pc, #100]	@ (8000da4 <main+0x2f4>)
    		  pos++;
 8000d40:	3201      	adds	r2, #1
    		  num[pos] = num1;
 8000d42:	6805      	ldr	r5, [r0, #0]
 8000d44:	605c      	str	r4, [r3, #4]
 8000d46:	601d      	str	r5, [r3, #0]
    		  num1 = 0; //reset num1
 8000d48:	6004      	str	r4, [r0, #0]
    		  pos++;
 8000d4a:	700a      	strb	r2, [r1, #0]
    	  if (key==DEL)
 8000d4c:	e74c      	b.n	8000be8 <main+0x138>
 8000d4e:	2b0a      	cmp	r3, #10
 8000d50:	d000      	beq.n	8000d54 <main+0x2a4>
 8000d52:	e749      	b.n	8000be8 <main+0x138>
    		  num1=0;
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <main+0x2f4>)
    		      equaltion[i] = 0;
 8000d56:	0021      	movs	r1, r4
    		  num1=0;
 8000d58:	6018      	str	r0, [r3, #0]
    		  pos=0;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <main+0x2dc>)
    		      equaltion[i] = 0;
 8000d5c:	2209      	movs	r2, #9
    		  pos=0;
 8000d5e:	7018      	strb	r0, [r3, #0]
    		      equaltion[i] = 0;
 8000d60:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <main+0x2e0>)
 8000d62:	f000 fc79 	bl	8001658 <memset>
    		      num[i] = 0;
 8000d66:	2250      	movs	r2, #80	@ 0x50
 8000d68:	0021      	movs	r1, r4
 8000d6a:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <main+0x2f0>)
 8000d6c:	f000 fc74 	bl	8001658 <memset>
 8000d70:	e73a      	b.n	8000be8 <main+0x138>
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	080016dc 	.word	0x080016dc
 8000d80:	20000041 	.word	0x20000041
 8000d84:	20000040 	.word	0x20000040
 8000d88:	080016f8 	.word	0x080016f8
 8000d8c:	20000042 	.word	0x20000042
 8000d90:	20000043 	.word	0x20000043
 8000d94:	080016fa 	.word	0x080016fa
 8000d98:	080016fc 	.word	0x080016fc
 8000d9c:	080016fe 	.word	0x080016fe
 8000da0:	20000050 	.word	0x20000050
 8000da4:	20000030 	.word	0x20000030
 8000da8:	20000042 	.word	0x20000042
 8000dac:	20000038 	.word	0x20000038

08000db0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db0:	2101      	movs	r1, #1
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_MspInit+0x2c>)
{
 8000db4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	699a      	ldr	r2, [r3, #24]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	619a      	str	r2, [r3, #24]
 8000dbc:	699a      	ldr	r2, [r3, #24]
 8000dbe:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	9200      	str	r2, [sp, #0]
 8000dc4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	69da      	ldr	r2, [r3, #28]
 8000dc8:	0549      	lsls	r1, r1, #21
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	61da      	str	r2, [r3, #28]
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	b002      	add	sp, #8
 8000dd8:	4770      	bx	lr
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000

08000de0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler>

08000de2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler>

08000de4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dea:	f000 f861 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bd10      	pop	{r4, pc}

08000df0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000df0:	4770      	bx	lr
	...

08000df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df8:	f7ff fffa 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	@ (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	@ (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e22:	f000 fc21 	bl	8001668 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e26:	f7ff fe43 	bl	8000ab0 <main>

08000e2a <LoopForever>:

LoopForever:
    b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   r0, =_estack
 8000e2c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e38:	08001750 	.word	0x08001750
  ldr r2, =_sbss
 8000e3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e40:	200000a4 	.word	0x200000a4

08000e44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_IRQHandler>
	...

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	20fa      	movs	r0, #250	@ 0xfa
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_InitTick+0x3c>)
 8000e50:	0080      	lsls	r0, r0, #2
 8000e52:	7819      	ldrb	r1, [r3, #0]
 8000e54:	f7ff f96a 	bl	800012c <__udivsi3>
 8000e58:	4c0b      	ldr	r4, [pc, #44]	@ (8000e88 <HAL_InitTick+0x40>)
 8000e5a:	0001      	movs	r1, r0
 8000e5c:	6820      	ldr	r0, [r4, #0]
 8000e5e:	f7ff f965 	bl	800012c <__udivsi3>
 8000e62:	f000 f873 	bl	8000f4c <HAL_SYSTICK_Config>
 8000e66:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000e68:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6a:	2c00      	cmp	r4, #0
 8000e6c:	d109      	bne.n	8000e82 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	2d03      	cmp	r5, #3
 8000e70:	d807      	bhi.n	8000e82 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e72:	3802      	subs	r0, #2
 8000e74:	0022      	movs	r2, r4
 8000e76:	0029      	movs	r1, r5
 8000e78:	f000 f83e 	bl	8000ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	0020      	movs	r0, r4
 8000e7e:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <HAL_InitTick+0x44>)
 8000e80:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	20000004 	.word	0x20000004
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000008 	.word	0x20000008

08000e90 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	2310      	movs	r3, #16
 8000e92:	4a06      	ldr	r2, [pc, #24]	@ (8000eac <HAL_Init+0x1c>)
{
 8000e94:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e96:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e98:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	f7ff ffd3 	bl	8000e48 <HAL_InitTick>
  HAL_MspInit();
 8000ea2:	f7ff ff85 	bl	8000db0 <HAL_MspInit>
}
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	bd10      	pop	{r4, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eb0:	4a03      	ldr	r2, [pc, #12]	@ (8000ec0 <HAL_IncTick+0x10>)
 8000eb2:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <HAL_IncTick+0x14>)
 8000eb4:	6811      	ldr	r1, [r2, #0]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	185b      	adds	r3, r3, r1
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	4770      	bx	lr
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	200000a0 	.word	0x200000a0
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ec8:	4b01      	ldr	r3, [pc, #4]	@ (8000ed0 <HAL_GetTick+0x8>)
 8000eca:	6818      	ldr	r0, [r3, #0]
}
 8000ecc:	4770      	bx	lr
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	200000a0 	.word	0x200000a0

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff fff6 	bl	8000ec8 <HAL_GetTick>
 8000edc:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	1c63      	adds	r3, r4, #1
 8000ee0:	d002      	beq.n	8000ee8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <HAL_Delay+0x20>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	1b40      	subs	r0, r0, r5
 8000eee:	42a0      	cmp	r0, r4
 8000ef0:	d3fa      	bcc.n	8000ee8 <HAL_Delay+0x14>
  {
  }
}
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efa:	24ff      	movs	r4, #255	@ 0xff
 8000efc:	2203      	movs	r2, #3
 8000efe:	000b      	movs	r3, r1
 8000f00:	0021      	movs	r1, r4
 8000f02:	4002      	ands	r2, r0
 8000f04:	00d2      	lsls	r2, r2, #3
 8000f06:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f08:	019b      	lsls	r3, r3, #6
 8000f0a:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0c:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f0e:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000f10:	2800      	cmp	r0, #0
 8000f12:	db0a      	blt.n	8000f2a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f14:	24c0      	movs	r4, #192	@ 0xc0
 8000f16:	4a0b      	ldr	r2, [pc, #44]	@ (8000f44 <HAL_NVIC_SetPriority+0x4c>)
 8000f18:	0880      	lsrs	r0, r0, #2
 8000f1a:	0080      	lsls	r0, r0, #2
 8000f1c:	1880      	adds	r0, r0, r2
 8000f1e:	00a4      	lsls	r4, r4, #2
 8000f20:	5902      	ldr	r2, [r0, r4]
 8000f22:	400a      	ands	r2, r1
 8000f24:	4313      	orrs	r3, r2
 8000f26:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000f28:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	4010      	ands	r0, r2
 8000f2e:	3808      	subs	r0, #8
 8000f30:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <HAL_NVIC_SetPriority+0x50>)
 8000f32:	0880      	lsrs	r0, r0, #2
 8000f34:	0080      	lsls	r0, r0, #2
 8000f36:	1880      	adds	r0, r0, r2
 8000f38:	69c2      	ldr	r2, [r0, #28]
 8000f3a:	4011      	ands	r1, r2
 8000f3c:	4319      	orrs	r1, r3
 8000f3e:	61c1      	str	r1, [r0, #28]
 8000f40:	e7f2      	b.n	8000f28 <HAL_NVIC_SetPriority+0x30>
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	1e43      	subs	r3, r0, #1
 8000f50:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d20d      	bcs.n	8000f74 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f58:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f60:	6a03      	ldr	r3, [r0, #32]
 8000f62:	0609      	lsls	r1, r1, #24
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f74:	4770      	bx	lr
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	e000e010 	.word	0xe000e010
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000f80:	2300      	movs	r3, #0
{
 8000f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f84:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f86:	680a      	ldr	r2, [r1, #0]
 8000f88:	0014      	movs	r4, r2
 8000f8a:	40dc      	lsrs	r4, r3
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000f8e:	b007      	add	sp, #28
 8000f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f92:	2501      	movs	r5, #1
 8000f94:	0014      	movs	r4, r2
 8000f96:	409d      	lsls	r5, r3
 8000f98:	402c      	ands	r4, r5
 8000f9a:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000f9c:	422a      	tst	r2, r5
 8000f9e:	d100      	bne.n	8000fa2 <HAL_GPIO_Init+0x22>
 8000fa0:	e098      	b.n	80010d4 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa2:	684a      	ldr	r2, [r1, #4]
 8000fa4:	005f      	lsls	r7, r3, #1
 8000fa6:	4694      	mov	ip, r2
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4664      	mov	r4, ip
 8000fac:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fae:	2403      	movs	r4, #3
 8000fb0:	40bc      	lsls	r4, r7
 8000fb2:	43e4      	mvns	r4, r4
 8000fb4:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fb6:	1e54      	subs	r4, r2, #1
 8000fb8:	2c01      	cmp	r4, #1
 8000fba:	d82e      	bhi.n	800101a <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000fbc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fbe:	9c01      	ldr	r4, [sp, #4]
 8000fc0:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc2:	68cc      	ldr	r4, [r1, #12]
 8000fc4:	40bc      	lsls	r4, r7
 8000fc6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000fc8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fca:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fcc:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fce:	43ac      	bics	r4, r5
 8000fd0:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd2:	4664      	mov	r4, ip
 8000fd4:	0924      	lsrs	r4, r4, #4
 8000fd6:	4034      	ands	r4, r6
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000fdc:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000fde:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fe0:	9c01      	ldr	r4, [sp, #4]
 8000fe2:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fe4:	688c      	ldr	r4, [r1, #8]
 8000fe6:	40bc      	lsls	r4, r7
 8000fe8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000fea:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fec:	2a02      	cmp	r2, #2
 8000fee:	d116      	bne.n	800101e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff0:	2507      	movs	r5, #7
 8000ff2:	260f      	movs	r6, #15
 8000ff4:	401d      	ands	r5, r3
 8000ff6:	00ad      	lsls	r5, r5, #2
 8000ff8:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000ffa:	08dc      	lsrs	r4, r3, #3
 8000ffc:	00a4      	lsls	r4, r4, #2
 8000ffe:	1904      	adds	r4, r0, r4
 8001000:	9402      	str	r4, [sp, #8]
 8001002:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001004:	9603      	str	r6, [sp, #12]
 8001006:	0026      	movs	r6, r4
 8001008:	9c03      	ldr	r4, [sp, #12]
 800100a:	43a6      	bics	r6, r4
 800100c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100e:	690e      	ldr	r6, [r1, #16]
 8001010:	40ae      	lsls	r6, r5
 8001012:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001014:	9c02      	ldr	r4, [sp, #8]
 8001016:	6226      	str	r6, [r4, #32]
 8001018:	e001      	b.n	800101e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101a:	2a03      	cmp	r2, #3
 800101c:	d1df      	bne.n	8000fde <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001020:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001022:	9d01      	ldr	r5, [sp, #4]
 8001024:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001026:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001028:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800102a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800102c:	4662      	mov	r2, ip
 800102e:	02a4      	lsls	r4, r4, #10
 8001030:	4222      	tst	r2, r4
 8001032:	d04f      	beq.n	80010d4 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001034:	2501      	movs	r5, #1
 8001036:	4a28      	ldr	r2, [pc, #160]	@ (80010d8 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001038:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103c:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	432c      	orrs	r4, r5
 8001040:	6194      	str	r4, [r2, #24]
 8001042:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001044:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	402a      	ands	r2, r5
 8001048:	9205      	str	r2, [sp, #20]
 800104a:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 800104c:	4a23      	ldr	r2, [pc, #140]	@ (80010dc <HAL_GPIO_Init+0x15c>)
 800104e:	00a4      	lsls	r4, r4, #2
 8001050:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001052:	220f      	movs	r2, #15
 8001054:	3502      	adds	r5, #2
 8001056:	401d      	ands	r5, r3
 8001058:	00ad      	lsls	r5, r5, #2
 800105a:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 800105c:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800105e:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001060:	2200      	movs	r2, #0
 8001062:	42b8      	cmp	r0, r7
 8001064:	d00c      	beq.n	8001080 <HAL_GPIO_Init+0x100>
 8001066:	4f1e      	ldr	r7, [pc, #120]	@ (80010e0 <HAL_GPIO_Init+0x160>)
 8001068:	3201      	adds	r2, #1
 800106a:	42b8      	cmp	r0, r7
 800106c:	d008      	beq.n	8001080 <HAL_GPIO_Init+0x100>
 800106e:	4f1d      	ldr	r7, [pc, #116]	@ (80010e4 <HAL_GPIO_Init+0x164>)
 8001070:	3201      	adds	r2, #1
 8001072:	42b8      	cmp	r0, r7
 8001074:	d004      	beq.n	8001080 <HAL_GPIO_Init+0x100>
 8001076:	4f1c      	ldr	r7, [pc, #112]	@ (80010e8 <HAL_GPIO_Init+0x168>)
 8001078:	3203      	adds	r2, #3
 800107a:	42b8      	cmp	r0, r7
 800107c:	d100      	bne.n	8001080 <HAL_GPIO_Init+0x100>
 800107e:	3a02      	subs	r2, #2
 8001080:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001082:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001084:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001086:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8001088:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 800108a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 800108c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800108e:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8001090:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001092:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001094:	02ff      	lsls	r7, r7, #11
 8001096:	d401      	bmi.n	800109c <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8001098:	0035      	movs	r5, r6
 800109a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800109c:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800109e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80010a0:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80010a2:	9d00      	ldr	r5, [sp, #0]
 80010a4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a6:	02bf      	lsls	r7, r7, #10
 80010a8:	d401      	bmi.n	80010ae <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 80010aa:	0035      	movs	r5, r6
 80010ac:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ae:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80010b0:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80010b2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80010b4:	9d00      	ldr	r5, [sp, #0]
 80010b6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b8:	03bf      	lsls	r7, r7, #14
 80010ba:	d401      	bmi.n	80010c0 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 80010bc:	0035      	movs	r5, r6
 80010be:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80010c2:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80010c4:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80010c6:	9e00      	ldr	r6, [sp, #0]
 80010c8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ca:	03ff      	lsls	r7, r7, #15
 80010cc:	d401      	bmi.n	80010d2 <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 80010ce:	4025      	ands	r5, r4
 80010d0:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80010d2:	6016      	str	r6, [r2, #0]
    position++;
 80010d4:	3301      	adds	r3, #1
 80010d6:	e756      	b.n	8000f86 <HAL_GPIO_Init+0x6>
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000
 80010e0:	48000400 	.word	0x48000400
 80010e4:	48000800 	.word	0x48000800
 80010e8:	48000c00 	.word	0x48000c00
 80010ec:	40010400 	.word	0x40010400

080010f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f0:	6900      	ldr	r0, [r0, #16]
 80010f2:	4008      	ands	r0, r1
 80010f4:	1e43      	subs	r3, r0, #1
 80010f6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80010f8:	b2c0      	uxtb	r0, r0
  }
 80010fa:	4770      	bx	lr

080010fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	d001      	beq.n	8001104 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001100:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001102:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001104:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001106:	e7fc      	b.n	8001102 <HAL_GPIO_WritePin+0x6>

08001108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	0004      	movs	r4, r0
 800110c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800110e:	2800      	cmp	r0, #0
 8001110:	d045      	beq.n	800119e <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	6803      	ldr	r3, [r0, #0]
 8001114:	07db      	lsls	r3, r3, #31
 8001116:	d42f      	bmi.n	8001178 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	079b      	lsls	r3, r3, #30
 800111c:	d500      	bpl.n	8001120 <HAL_RCC_OscConfig+0x18>
 800111e:	e081      	b.n	8001224 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	071b      	lsls	r3, r3, #28
 8001124:	d500      	bpl.n	8001128 <HAL_RCC_OscConfig+0x20>
 8001126:	e0bc      	b.n	80012a2 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	075b      	lsls	r3, r3, #29
 800112c:	d500      	bpl.n	8001130 <HAL_RCC_OscConfig+0x28>
 800112e:	e0df      	b.n	80012f0 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	06db      	lsls	r3, r3, #27
 8001134:	d51a      	bpl.n	800116c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001136:	6962      	ldr	r2, [r4, #20]
 8001138:	2304      	movs	r3, #4
 800113a:	4db4      	ldr	r5, [pc, #720]	@ (800140c <HAL_RCC_OscConfig+0x304>)
 800113c:	2a01      	cmp	r2, #1
 800113e:	d000      	beq.n	8001142 <HAL_RCC_OscConfig+0x3a>
 8001140:	e148      	b.n	80013d4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001142:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001144:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001146:	430b      	orrs	r3, r1
 8001148:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 800114a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800114c:	431a      	orrs	r2, r3
 800114e:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001150:	f7ff feba 	bl	8000ec8 <HAL_GetTick>
 8001154:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001156:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001158:	423b      	tst	r3, r7
 800115a:	d100      	bne.n	800115e <HAL_RCC_OscConfig+0x56>
 800115c:	e133      	b.n	80013c6 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800115e:	21f8      	movs	r1, #248	@ 0xf8
 8001160:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001162:	69a3      	ldr	r3, [r4, #24]
 8001164:	438a      	bics	r2, r1
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4313      	orrs	r3, r2
 800116a:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116c:	6a23      	ldr	r3, [r4, #32]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d000      	beq.n	8001174 <HAL_RCC_OscConfig+0x6c>
 8001172:	e157      	b.n	8001424 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8001174:	2000      	movs	r0, #0
 8001176:	e02a      	b.n	80011ce <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001178:	220c      	movs	r2, #12
 800117a:	4da4      	ldr	r5, [pc, #656]	@ (800140c <HAL_RCC_OscConfig+0x304>)
 800117c:	686b      	ldr	r3, [r5, #4]
 800117e:	4013      	ands	r3, r2
 8001180:	2b04      	cmp	r3, #4
 8001182:	d006      	beq.n	8001192 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001184:	686b      	ldr	r3, [r5, #4]
 8001186:	4013      	ands	r3, r2
 8001188:	2b08      	cmp	r3, #8
 800118a:	d10a      	bne.n	80011a2 <HAL_RCC_OscConfig+0x9a>
 800118c:	686b      	ldr	r3, [r5, #4]
 800118e:	03db      	lsls	r3, r3, #15
 8001190:	d507      	bpl.n	80011a2 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001192:	682b      	ldr	r3, [r5, #0]
 8001194:	039b      	lsls	r3, r3, #14
 8001196:	d5bf      	bpl.n	8001118 <HAL_RCC_OscConfig+0x10>
 8001198:	6863      	ldr	r3, [r4, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1bc      	bne.n	8001118 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800119e:	2001      	movs	r0, #1
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a2:	6863      	ldr	r3, [r4, #4]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d114      	bne.n	80011d2 <HAL_RCC_OscConfig+0xca>
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	682a      	ldr	r2, [r5, #0]
 80011ac:	025b      	lsls	r3, r3, #9
 80011ae:	4313      	orrs	r3, r2
 80011b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011b2:	f7ff fe89 	bl	8000ec8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80011b8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	02bf      	lsls	r7, r7, #10
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	423b      	tst	r3, r7
 80011c0:	d1aa      	bne.n	8001118 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c2:	f7ff fe81 	bl	8000ec8 <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	2864      	cmp	r0, #100	@ 0x64
 80011ca:	d9f7      	bls.n	80011bc <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 80011cc:	2003      	movs	r0, #3
}
 80011ce:	b005      	add	sp, #20
 80011d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d116      	bne.n	8001204 <HAL_RCC_OscConfig+0xfc>
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	4a8d      	ldr	r2, [pc, #564]	@ (8001410 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011dc:	4013      	ands	r3, r2
 80011de:	602b      	str	r3, [r5, #0]
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	4a8c      	ldr	r2, [pc, #560]	@ (8001414 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e4:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e6:	4013      	ands	r3, r2
 80011e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011ea:	f7ff fe6d 	bl	8000ec8 <HAL_GetTick>
 80011ee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f0:	682b      	ldr	r3, [r5, #0]
 80011f2:	423b      	tst	r3, r7
 80011f4:	d100      	bne.n	80011f8 <HAL_RCC_OscConfig+0xf0>
 80011f6:	e78f      	b.n	8001118 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fe66 	bl	8000ec8 <HAL_GetTick>
 80011fc:	1b80      	subs	r0, r0, r6
 80011fe:	2864      	cmp	r0, #100	@ 0x64
 8001200:	d9f6      	bls.n	80011f0 <HAL_RCC_OscConfig+0xe8>
 8001202:	e7e3      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001204:	2b05      	cmp	r3, #5
 8001206:	d105      	bne.n	8001214 <HAL_RCC_OscConfig+0x10c>
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	682a      	ldr	r2, [r5, #0]
 800120c:	02db      	lsls	r3, r3, #11
 800120e:	4313      	orrs	r3, r2
 8001210:	602b      	str	r3, [r5, #0]
 8001212:	e7c9      	b.n	80011a8 <HAL_RCC_OscConfig+0xa0>
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	4a7e      	ldr	r2, [pc, #504]	@ (8001410 <HAL_RCC_OscConfig+0x308>)
 8001218:	4013      	ands	r3, r2
 800121a:	602b      	str	r3, [r5, #0]
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	4a7d      	ldr	r2, [pc, #500]	@ (8001414 <HAL_RCC_OscConfig+0x30c>)
 8001220:	4013      	ands	r3, r2
 8001222:	e7c5      	b.n	80011b0 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001224:	220c      	movs	r2, #12
 8001226:	4d79      	ldr	r5, [pc, #484]	@ (800140c <HAL_RCC_OscConfig+0x304>)
 8001228:	686b      	ldr	r3, [r5, #4]
 800122a:	4213      	tst	r3, r2
 800122c:	d006      	beq.n	800123c <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800122e:	686b      	ldr	r3, [r5, #4]
 8001230:	4013      	ands	r3, r2
 8001232:	2b08      	cmp	r3, #8
 8001234:	d110      	bne.n	8001258 <HAL_RCC_OscConfig+0x150>
 8001236:	686b      	ldr	r3, [r5, #4]
 8001238:	03db      	lsls	r3, r3, #15
 800123a:	d40d      	bmi.n	8001258 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	079b      	lsls	r3, r3, #30
 8001240:	d502      	bpl.n	8001248 <HAL_RCC_OscConfig+0x140>
 8001242:	68e3      	ldr	r3, [r4, #12]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d1aa      	bne.n	800119e <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001248:	21f8      	movs	r1, #248	@ 0xf8
 800124a:	682a      	ldr	r2, [r5, #0]
 800124c:	6923      	ldr	r3, [r4, #16]
 800124e:	438a      	bics	r2, r1
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4313      	orrs	r3, r2
 8001254:	602b      	str	r3, [r5, #0]
 8001256:	e763      	b.n	8001120 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001258:	68e2      	ldr	r2, [r4, #12]
 800125a:	2301      	movs	r3, #1
 800125c:	2a00      	cmp	r2, #0
 800125e:	d00f      	beq.n	8001280 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001260:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001262:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001264:	4313      	orrs	r3, r2
 8001266:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001268:	f7ff fe2e 	bl	8000ec8 <HAL_GetTick>
 800126c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	423b      	tst	r3, r7
 8001272:	d1e9      	bne.n	8001248 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fe28 	bl	8000ec8 <HAL_GetTick>
 8001278:	1b80      	subs	r0, r0, r6
 800127a:	2802      	cmp	r0, #2
 800127c:	d9f7      	bls.n	800126e <HAL_RCC_OscConfig+0x166>
 800127e:	e7a5      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8001280:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001284:	439a      	bics	r2, r3
 8001286:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001288:	f7ff fe1e 	bl	8000ec8 <HAL_GetTick>
 800128c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	423b      	tst	r3, r7
 8001292:	d100      	bne.n	8001296 <HAL_RCC_OscConfig+0x18e>
 8001294:	e744      	b.n	8001120 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff fe17 	bl	8000ec8 <HAL_GetTick>
 800129a:	1b80      	subs	r0, r0, r6
 800129c:	2802      	cmp	r0, #2
 800129e:	d9f6      	bls.n	800128e <HAL_RCC_OscConfig+0x186>
 80012a0:	e794      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a2:	69e2      	ldr	r2, [r4, #28]
 80012a4:	2301      	movs	r3, #1
 80012a6:	4d59      	ldr	r5, [pc, #356]	@ (800140c <HAL_RCC_OscConfig+0x304>)
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	d010      	beq.n	80012ce <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 80012ac:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80012b0:	4313      	orrs	r3, r2
 80012b2:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80012b4:	f7ff fe08 	bl	8000ec8 <HAL_GetTick>
 80012b8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80012bc:	423b      	tst	r3, r7
 80012be:	d000      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1ba>
 80012c0:	e732      	b.n	8001128 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fe01 	bl	8000ec8 <HAL_GetTick>
 80012c6:	1b80      	subs	r0, r0, r6
 80012c8:	2802      	cmp	r0, #2
 80012ca:	d9f6      	bls.n	80012ba <HAL_RCC_OscConfig+0x1b2>
 80012cc:	e77e      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 80012ce:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80012d2:	439a      	bics	r2, r3
 80012d4:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80012d6:	f7ff fdf7 	bl	8000ec8 <HAL_GetTick>
 80012da:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80012de:	423b      	tst	r3, r7
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1dc>
 80012e2:	e721      	b.n	8001128 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e4:	f7ff fdf0 	bl	8000ec8 <HAL_GetTick>
 80012e8:	1b80      	subs	r0, r0, r6
 80012ea:	2802      	cmp	r0, #2
 80012ec:	d9f6      	bls.n	80012dc <HAL_RCC_OscConfig+0x1d4>
 80012ee:	e76d      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f0:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80012f2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f4:	4d45      	ldr	r5, [pc, #276]	@ (800140c <HAL_RCC_OscConfig+0x304>)
 80012f6:	0552      	lsls	r2, r2, #21
 80012f8:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80012fa:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fc:	4213      	tst	r3, r2
 80012fe:	d108      	bne.n	8001312 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	69eb      	ldr	r3, [r5, #28]
 8001302:	4313      	orrs	r3, r2
 8001304:	61eb      	str	r3, [r5, #28]
 8001306:	69eb      	ldr	r3, [r5, #28]
 8001308:	4013      	ands	r3, r2
 800130a:	9303      	str	r3, [sp, #12]
 800130c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800130e:	2301      	movs	r3, #1
 8001310:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001312:	2780      	movs	r7, #128	@ 0x80
 8001314:	4e40      	ldr	r6, [pc, #256]	@ (8001418 <HAL_RCC_OscConfig+0x310>)
 8001316:	007f      	lsls	r7, r7, #1
 8001318:	6833      	ldr	r3, [r6, #0]
 800131a:	423b      	tst	r3, r7
 800131c:	d015      	beq.n	800134a <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131e:	68a3      	ldr	r3, [r4, #8]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d122      	bne.n	800136a <HAL_RCC_OscConfig+0x262>
 8001324:	6a2a      	ldr	r2, [r5, #32]
 8001326:	4313      	orrs	r3, r2
 8001328:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800132a:	f7ff fdcd 	bl	8000ec8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001330:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001332:	6a2b      	ldr	r3, [r5, #32]
 8001334:	423b      	tst	r3, r7
 8001336:	d03f      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8001338:	9b00      	ldr	r3, [sp, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d000      	beq.n	8001340 <HAL_RCC_OscConfig+0x238>
 800133e:	e6f7      	b.n	8001130 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001340:	69eb      	ldr	r3, [r5, #28]
 8001342:	4a36      	ldr	r2, [pc, #216]	@ (800141c <HAL_RCC_OscConfig+0x314>)
 8001344:	4013      	ands	r3, r2
 8001346:	61eb      	str	r3, [r5, #28]
 8001348:	e6f2      	b.n	8001130 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134a:	6833      	ldr	r3, [r6, #0]
 800134c:	433b      	orrs	r3, r7
 800134e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001350:	f7ff fdba 	bl	8000ec8 <HAL_GetTick>
 8001354:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	6833      	ldr	r3, [r6, #0]
 8001358:	423b      	tst	r3, r7
 800135a:	d1e0      	bne.n	800131e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135c:	f7ff fdb4 	bl	8000ec8 <HAL_GetTick>
 8001360:	9b01      	ldr	r3, [sp, #4]
 8001362:	1ac0      	subs	r0, r0, r3
 8001364:	2864      	cmp	r0, #100	@ 0x64
 8001366:	d9f6      	bls.n	8001356 <HAL_RCC_OscConfig+0x24e>
 8001368:	e730      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136a:	2201      	movs	r2, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d114      	bne.n	800139a <HAL_RCC_OscConfig+0x292>
 8001370:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001372:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001374:	4393      	bics	r3, r2
 8001376:	622b      	str	r3, [r5, #32]
 8001378:	6a2b      	ldr	r3, [r5, #32]
 800137a:	3203      	adds	r2, #3
 800137c:	4393      	bics	r3, r2
 800137e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001380:	f7ff fda2 	bl	8000ec8 <HAL_GetTick>
 8001384:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001386:	6a2b      	ldr	r3, [r5, #32]
 8001388:	423b      	tst	r3, r7
 800138a:	d0d5      	beq.n	8001338 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138c:	f7ff fd9c 	bl	8000ec8 <HAL_GetTick>
 8001390:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <HAL_RCC_OscConfig+0x318>)
 8001392:	1b80      	subs	r0, r0, r6
 8001394:	4298      	cmp	r0, r3
 8001396:	d9f6      	bls.n	8001386 <HAL_RCC_OscConfig+0x27e>
 8001398:	e718      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139a:	2b05      	cmp	r3, #5
 800139c:	d105      	bne.n	80013aa <HAL_RCC_OscConfig+0x2a2>
 800139e:	6a29      	ldr	r1, [r5, #32]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	430b      	orrs	r3, r1
 80013a4:	622b      	str	r3, [r5, #32]
 80013a6:	6a2b      	ldr	r3, [r5, #32]
 80013a8:	e7bd      	b.n	8001326 <HAL_RCC_OscConfig+0x21e>
 80013aa:	6a2b      	ldr	r3, [r5, #32]
 80013ac:	4393      	bics	r3, r2
 80013ae:	2204      	movs	r2, #4
 80013b0:	622b      	str	r3, [r5, #32]
 80013b2:	6a2b      	ldr	r3, [r5, #32]
 80013b4:	4393      	bics	r3, r2
 80013b6:	e7b7      	b.n	8001328 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b8:	f7ff fd86 	bl	8000ec8 <HAL_GetTick>
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <HAL_RCC_OscConfig+0x318>)
 80013be:	1b80      	subs	r0, r0, r6
 80013c0:	4298      	cmp	r0, r3
 80013c2:	d9b6      	bls.n	8001332 <HAL_RCC_OscConfig+0x22a>
 80013c4:	e702      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013c6:	f7ff fd7f 	bl	8000ec8 <HAL_GetTick>
 80013ca:	1b80      	subs	r0, r0, r6
 80013cc:	2802      	cmp	r0, #2
 80013ce:	d800      	bhi.n	80013d2 <HAL_RCC_OscConfig+0x2ca>
 80013d0:	e6c1      	b.n	8001156 <HAL_RCC_OscConfig+0x4e>
 80013d2:	e6fb      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013d4:	3205      	adds	r2, #5
 80013d6:	d103      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80013d8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80013da:	439a      	bics	r2, r3
 80013dc:	636a      	str	r2, [r5, #52]	@ 0x34
 80013de:	e6be      	b.n	800115e <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 80013e0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013e2:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80013e4:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80013e6:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80013e8:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 80013ea:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80013ec:	4393      	bics	r3, r2
 80013ee:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80013f0:	f7ff fd6a 	bl	8000ec8 <HAL_GetTick>
 80013f4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80013f8:	423b      	tst	r3, r7
 80013fa:	d100      	bne.n	80013fe <HAL_RCC_OscConfig+0x2f6>
 80013fc:	e6b6      	b.n	800116c <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013fe:	f7ff fd63 	bl	8000ec8 <HAL_GetTick>
 8001402:	1b80      	subs	r0, r0, r6
 8001404:	2802      	cmp	r0, #2
 8001406:	d9f6      	bls.n	80013f6 <HAL_RCC_OscConfig+0x2ee>
 8001408:	e6e0      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	40021000 	.word	0x40021000
 8001410:	fffeffff 	.word	0xfffeffff
 8001414:	fffbffff 	.word	0xfffbffff
 8001418:	40007000 	.word	0x40007000
 800141c:	efffffff 	.word	0xefffffff
 8001420:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001424:	210c      	movs	r1, #12
 8001426:	4d34      	ldr	r5, [pc, #208]	@ (80014f8 <HAL_RCC_OscConfig+0x3f0>)
 8001428:	686a      	ldr	r2, [r5, #4]
 800142a:	400a      	ands	r2, r1
 800142c:	2a08      	cmp	r2, #8
 800142e:	d047      	beq.n	80014c0 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001430:	4a32      	ldr	r2, [pc, #200]	@ (80014fc <HAL_RCC_OscConfig+0x3f4>)
 8001432:	2b02      	cmp	r3, #2
 8001434:	d132      	bne.n	800149c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8001436:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001438:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800143a:	4013      	ands	r3, r2
 800143c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800143e:	f7ff fd43 	bl	8000ec8 <HAL_GetTick>
 8001442:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001444:	04bf      	lsls	r7, r7, #18
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	423b      	tst	r3, r7
 800144a:	d121      	bne.n	8001490 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800144c:	220f      	movs	r2, #15
 800144e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001450:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001452:	4393      	bics	r3, r2
 8001454:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001456:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001458:	4313      	orrs	r3, r2
 800145a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800145c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800145e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001460:	686a      	ldr	r2, [r5, #4]
 8001462:	430b      	orrs	r3, r1
 8001464:	4926      	ldr	r1, [pc, #152]	@ (8001500 <HAL_RCC_OscConfig+0x3f8>)
 8001466:	400a      	ands	r2, r1
 8001468:	4313      	orrs	r3, r2
 800146a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	682a      	ldr	r2, [r5, #0]
 8001470:	045b      	lsls	r3, r3, #17
 8001472:	4313      	orrs	r3, r2
 8001474:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001476:	f7ff fd27 	bl	8000ec8 <HAL_GetTick>
 800147a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	4233      	tst	r3, r6
 8001480:	d000      	beq.n	8001484 <HAL_RCC_OscConfig+0x37c>
 8001482:	e677      	b.n	8001174 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fd20 	bl	8000ec8 <HAL_GetTick>
 8001488:	1b00      	subs	r0, r0, r4
 800148a:	2802      	cmp	r0, #2
 800148c:	d9f6      	bls.n	800147c <HAL_RCC_OscConfig+0x374>
 800148e:	e69d      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fd1a 	bl	8000ec8 <HAL_GetTick>
 8001494:	1b80      	subs	r0, r0, r6
 8001496:	2802      	cmp	r0, #2
 8001498:	d9d5      	bls.n	8001446 <HAL_RCC_OscConfig+0x33e>
 800149a:	e697      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 800149c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80014a0:	4013      	ands	r3, r2
 80014a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014a4:	f7ff fd10 	bl	8000ec8 <HAL_GetTick>
 80014a8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014aa:	04b6      	lsls	r6, r6, #18
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	4233      	tst	r3, r6
 80014b0:	d100      	bne.n	80014b4 <HAL_RCC_OscConfig+0x3ac>
 80014b2:	e65f      	b.n	8001174 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fd08 	bl	8000ec8 <HAL_GetTick>
 80014b8:	1b00      	subs	r0, r0, r4
 80014ba:	2802      	cmp	r0, #2
 80014bc:	d9f6      	bls.n	80014ac <HAL_RCC_OscConfig+0x3a4>
 80014be:	e685      	b.n	80011cc <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d100      	bne.n	80014c6 <HAL_RCC_OscConfig+0x3be>
 80014c4:	e66b      	b.n	800119e <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 80014c8:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80014cc:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 80014ce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d0:	4002      	ands	r2, r0
 80014d2:	428a      	cmp	r2, r1
 80014d4:	d000      	beq.n	80014d8 <HAL_RCC_OscConfig+0x3d0>
 80014d6:	e662      	b.n	800119e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014d8:	220f      	movs	r2, #15
 80014da:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014dc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80014de:	4293      	cmp	r3, r2
 80014e0:	d000      	beq.n	80014e4 <HAL_RCC_OscConfig+0x3dc>
 80014e2:	e65c      	b.n	800119e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014e4:	23f0      	movs	r3, #240	@ 0xf0
 80014e6:	039b      	lsls	r3, r3, #14
 80014e8:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80014ec:	1ac0      	subs	r0, r0, r3
 80014ee:	1e43      	subs	r3, r0, #1
 80014f0:	4198      	sbcs	r0, r3
 80014f2:	b2c0      	uxtb	r0, r0
 80014f4:	e66b      	b.n	80011ce <HAL_RCC_OscConfig+0xc6>
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	40021000 	.word	0x40021000
 80014fc:	feffffff 	.word	0xfeffffff
 8001500:	ffc2ffff 	.word	0xffc2ffff

08001504 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001504:	220c      	movs	r2, #12
{
 8001506:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001508:	4d0c      	ldr	r5, [pc, #48]	@ (800153c <HAL_RCC_GetSysClockFreq+0x38>)
 800150a:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800150c:	401a      	ands	r2, r3
 800150e:	2a08      	cmp	r2, #8
 8001510:	d111      	bne.n	8001536 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001512:	200f      	movs	r0, #15
 8001514:	490a      	ldr	r1, [pc, #40]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001516:	0c9a      	lsrs	r2, r3, #18
 8001518:	4002      	ands	r2, r0
 800151a:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800151c:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800151e:	03db      	lsls	r3, r3, #15
 8001520:	d507      	bpl.n	8001532 <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001522:	4908      	ldr	r1, [pc, #32]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x40>)
 8001524:	4002      	ands	r2, r0
 8001526:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001528:	4807      	ldr	r0, [pc, #28]	@ (8001548 <HAL_RCC_GetSysClockFreq+0x44>)
 800152a:	f7fe fdff 	bl	800012c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800152e:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001530:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001532:	4806      	ldr	r0, [pc, #24]	@ (800154c <HAL_RCC_GetSysClockFreq+0x48>)
 8001534:	e7fb      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8001536:	4804      	ldr	r0, [pc, #16]	@ (8001548 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8001538:	e7fa      	b.n	8001530 <HAL_RCC_GetSysClockFreq+0x2c>
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	40021000 	.word	0x40021000
 8001540:	08001730 	.word	0x08001730
 8001544:	08001720 	.word	0x08001720
 8001548:	007a1200 	.word	0x007a1200
 800154c:	003d0900 	.word	0x003d0900

08001550 <HAL_RCC_ClockConfig>:
{
 8001550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001552:	0004      	movs	r4, r0
 8001554:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001556:	2800      	cmp	r0, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
}
 800155c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800155e:	2201      	movs	r2, #1
 8001560:	4d37      	ldr	r5, [pc, #220]	@ (8001640 <HAL_RCC_ClockConfig+0xf0>)
 8001562:	682b      	ldr	r3, [r5, #0]
 8001564:	4013      	ands	r3, r2
 8001566:	428b      	cmp	r3, r1
 8001568:	d31c      	bcc.n	80015a4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156a:	6822      	ldr	r2, [r4, #0]
 800156c:	0793      	lsls	r3, r2, #30
 800156e:	d422      	bmi.n	80015b6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001570:	07d2      	lsls	r2, r2, #31
 8001572:	d42f      	bmi.n	80015d4 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	2301      	movs	r3, #1
 8001576:	682a      	ldr	r2, [r5, #0]
 8001578:	401a      	ands	r2, r3
 800157a:	42b2      	cmp	r2, r6
 800157c:	d851      	bhi.n	8001622 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	4d30      	ldr	r5, [pc, #192]	@ (8001644 <HAL_RCC_ClockConfig+0xf4>)
 8001582:	075b      	lsls	r3, r3, #29
 8001584:	d454      	bmi.n	8001630 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001586:	f7ff ffbd 	bl	8001504 <HAL_RCC_GetSysClockFreq>
 800158a:	686b      	ldr	r3, [r5, #4]
 800158c:	4a2e      	ldr	r2, [pc, #184]	@ (8001648 <HAL_RCC_ClockConfig+0xf8>)
 800158e:	061b      	lsls	r3, r3, #24
 8001590:	0f1b      	lsrs	r3, r3, #28
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	492d      	ldr	r1, [pc, #180]	@ (800164c <HAL_RCC_ClockConfig+0xfc>)
 8001596:	40d8      	lsrs	r0, r3
 8001598:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800159a:	2003      	movs	r0, #3
 800159c:	f7ff fc54 	bl	8000e48 <HAL_InitTick>
  return HAL_OK;
 80015a0:	2000      	movs	r0, #0
 80015a2:	e7db      	b.n	800155c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a4:	682b      	ldr	r3, [r5, #0]
 80015a6:	4393      	bics	r3, r2
 80015a8:	430b      	orrs	r3, r1
 80015aa:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ac:	682b      	ldr	r3, [r5, #0]
 80015ae:	4013      	ands	r3, r2
 80015b0:	428b      	cmp	r3, r1
 80015b2:	d1d2      	bne.n	800155a <HAL_RCC_ClockConfig+0xa>
 80015b4:	e7d9      	b.n	800156a <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b6:	4923      	ldr	r1, [pc, #140]	@ (8001644 <HAL_RCC_ClockConfig+0xf4>)
 80015b8:	0753      	lsls	r3, r2, #29
 80015ba:	d504      	bpl.n	80015c6 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015bc:	23e0      	movs	r3, #224	@ 0xe0
 80015be:	6848      	ldr	r0, [r1, #4]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4303      	orrs	r3, r0
 80015c4:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c6:	20f0      	movs	r0, #240	@ 0xf0
 80015c8:	684b      	ldr	r3, [r1, #4]
 80015ca:	4383      	bics	r3, r0
 80015cc:	68a0      	ldr	r0, [r4, #8]
 80015ce:	4303      	orrs	r3, r0
 80015d0:	604b      	str	r3, [r1, #4]
 80015d2:	e7cd      	b.n	8001570 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d4:	4f1b      	ldr	r7, [pc, #108]	@ (8001644 <HAL_RCC_ClockConfig+0xf4>)
 80015d6:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d8:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d119      	bne.n	8001612 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	039b      	lsls	r3, r3, #14
 80015e0:	d5bb      	bpl.n	800155a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e2:	2103      	movs	r1, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	438b      	bics	r3, r1
 80015e8:	4313      	orrs	r3, r2
 80015ea:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 80015ec:	f7ff fc6c 	bl	8000ec8 <HAL_GetTick>
 80015f0:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	230c      	movs	r3, #12
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	401a      	ands	r2, r3
 80015f8:	6863      	ldr	r3, [r4, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d0b9      	beq.n	8001574 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff fc62 	bl	8000ec8 <HAL_GetTick>
 8001604:	9b01      	ldr	r3, [sp, #4]
 8001606:	1ac0      	subs	r0, r0, r3
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_RCC_ClockConfig+0x100>)
 800160a:	4298      	cmp	r0, r3
 800160c:	d9f1      	bls.n	80015f2 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800160e:	2003      	movs	r0, #3
 8001610:	e7a4      	b.n	800155c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001612:	2a02      	cmp	r2, #2
 8001614:	d102      	bne.n	800161c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	019b      	lsls	r3, r3, #6
 8001618:	d4e3      	bmi.n	80015e2 <HAL_RCC_ClockConfig+0x92>
 800161a:	e79e      	b.n	800155a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	079b      	lsls	r3, r3, #30
 800161e:	d4e0      	bmi.n	80015e2 <HAL_RCC_ClockConfig+0x92>
 8001620:	e79b      	b.n	800155a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	682a      	ldr	r2, [r5, #0]
 8001624:	439a      	bics	r2, r3
 8001626:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001628:	682a      	ldr	r2, [r5, #0]
 800162a:	421a      	tst	r2, r3
 800162c:	d0a7      	beq.n	800157e <HAL_RCC_ClockConfig+0x2e>
 800162e:	e794      	b.n	800155a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001630:	686b      	ldr	r3, [r5, #4]
 8001632:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <HAL_RCC_ClockConfig+0x104>)
 8001634:	4013      	ands	r3, r2
 8001636:	68e2      	ldr	r2, [r4, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	606b      	str	r3, [r5, #4]
 800163c:	e7a3      	b.n	8001586 <HAL_RCC_ClockConfig+0x36>
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	40022000 	.word	0x40022000
 8001644:	40021000 	.word	0x40021000
 8001648:	08001710 	.word	0x08001710
 800164c:	20000000 	.word	0x20000000
 8001650:	00001388 	.word	0x00001388
 8001654:	fffff8ff 	.word	0xfffff8ff

08001658 <memset>:
 8001658:	0003      	movs	r3, r0
 800165a:	1882      	adds	r2, r0, r2
 800165c:	4293      	cmp	r3, r2
 800165e:	d100      	bne.n	8001662 <memset+0xa>
 8001660:	4770      	bx	lr
 8001662:	7019      	strb	r1, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	e7f9      	b.n	800165c <memset+0x4>

08001668 <__libc_init_array>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	2600      	movs	r6, #0
 800166c:	4c0c      	ldr	r4, [pc, #48]	@ (80016a0 <__libc_init_array+0x38>)
 800166e:	4d0d      	ldr	r5, [pc, #52]	@ (80016a4 <__libc_init_array+0x3c>)
 8001670:	1b64      	subs	r4, r4, r5
 8001672:	10a4      	asrs	r4, r4, #2
 8001674:	42a6      	cmp	r6, r4
 8001676:	d109      	bne.n	800168c <__libc_init_array+0x24>
 8001678:	2600      	movs	r6, #0
 800167a:	f000 f823 	bl	80016c4 <_init>
 800167e:	4c0a      	ldr	r4, [pc, #40]	@ (80016a8 <__libc_init_array+0x40>)
 8001680:	4d0a      	ldr	r5, [pc, #40]	@ (80016ac <__libc_init_array+0x44>)
 8001682:	1b64      	subs	r4, r4, r5
 8001684:	10a4      	asrs	r4, r4, #2
 8001686:	42a6      	cmp	r6, r4
 8001688:	d105      	bne.n	8001696 <__libc_init_array+0x2e>
 800168a:	bd70      	pop	{r4, r5, r6, pc}
 800168c:	00b3      	lsls	r3, r6, #2
 800168e:	58eb      	ldr	r3, [r5, r3]
 8001690:	4798      	blx	r3
 8001692:	3601      	adds	r6, #1
 8001694:	e7ee      	b.n	8001674 <__libc_init_array+0xc>
 8001696:	00b3      	lsls	r3, r6, #2
 8001698:	58eb      	ldr	r3, [r5, r3]
 800169a:	4798      	blx	r3
 800169c:	3601      	adds	r6, #1
 800169e:	e7f2      	b.n	8001686 <__libc_init_array+0x1e>
 80016a0:	08001748 	.word	0x08001748
 80016a4:	08001748 	.word	0x08001748
 80016a8:	0800174c 	.word	0x0800174c
 80016ac:	08001748 	.word	0x08001748

080016b0 <memcpy>:
 80016b0:	2300      	movs	r3, #0
 80016b2:	b510      	push	{r4, lr}
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d100      	bne.n	80016ba <memcpy+0xa>
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	5ccc      	ldrb	r4, [r1, r3]
 80016bc:	54c4      	strb	r4, [r0, r3]
 80016be:	3301      	adds	r3, #1
 80016c0:	e7f8      	b.n	80016b4 <memcpy+0x4>
	...

080016c4 <_init>:
 80016c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ca:	bc08      	pop	{r3}
 80016cc:	469e      	mov	lr, r3
 80016ce:	4770      	bx	lr

080016d0 <_fini>:
 80016d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016d6:	bc08      	pop	{r3}
 80016d8:	469e      	mov	lr, r3
 80016da:	4770      	bx	lr
